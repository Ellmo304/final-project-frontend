{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/garden.js","js/controllers/gardens.js","js/models/images.js","js/controllers/main.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Garden","$resource","id","update","method","GardensNewController","create","save","gardensNew","garden","user_id","getPayload","GardensIndexController","gardensIndex","all","query","GardensShowController","deleteGarden","gardensShow","$remove","isLoggedIn","isAuthenticated","get","params","GardensEditController","gardensEdit","$update","Image","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","parseFloat","preventDefault","main","message","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","isCurrentUser","Number","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, () => {\n      $state.go('gardensIndex');\n    });\n  }\n  gardensNew.create = create;\n}\n\nGardensIndexController.$inject = ['Garden'];\nfunction GardensIndexController(Garden) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n}\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensShowController(Garden, $state, $auth) {\n  const gardensShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  gardensShow.garden = Garden.get($state.params);\n\n\n  // function isCurrentUser() {\n  //   Garden.get({ id: ($state.params) }, (garden) => {\n  //     gardensShow.garden = garden;\n  //   });\n  //   return gardensShow.garden.user.id === $auth.getPayload().id;\n  // }\n\n\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n  // this.isCurrentUser = isCurrentUser;\n  this.deleteGarden = deleteGarden;\n}\n\n\n\nGardensEditController.$inject = ['Garden', '$state'];\nfunction GardensEditController(Garden, $state) {\n  const gardensEdit = this;\n\n  gardensEdit.garden = Garden.get($state.params);\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardensShow.html',\n    controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}