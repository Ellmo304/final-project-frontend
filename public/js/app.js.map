{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/carousel.js","js/models/comment.js","js/controllers/comments.js","js/models/design.js","js/controllers/designs.js","js/models/garden.js","js/controllers/gardens.js","js/models/image.js","js/controllers/images.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/tile.js","js/controllers/tiles.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MyCarouselController","$scope","Garden","galleryItems","content","color","get","id","params","thisGarden","i","images","length","slides","push","Comment","$resource","update","method","CommentsNewController","create","console","log","commentsNew","comment","save","reload","garden_id","parseInt","user_id","getPayload","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComment","commentsShow","$remove","isLoggedIn","isAuthenticated","CommentsEditController","commentsEdit","$update","Design","DesignsNewController","Tile","tilesCreate","garden","designId","design","tiles","designsNew","tile","image","dataset","class_type","className","position","design_id","setClass","texture","selectedClass","selectedPng","setTile","index","innerHTML","setPng","string","name","myArr","Array","document","getElementById","getElementsByTagName","title","DesignsIndexController","designsIndex","DesignsShowController","isCurrentUser","designsShow","deleteDesign","DesignsEditController","designsEdit","like","url","unlike","GardensNewController","gardensNew","GardensIndexController","$like","$unlike","hasLiked","userId","toString","likes","indexOf","gardensIndex","GardensShowController","Item","showDesign","gardensShow","deleteGarden","destroyComment","thiscomment","getPoster","post","author","username","isCommentPoster","removeItem","item","thisItem","garden_ids","splice","getGardenRating","comments","sum","rating","gardenRating","Math","floor","nextSlide","currentSlide","slideInterval","setInterval","querySelectorAll","GardensEditController","Image","$rootScope","gardensEdit","deleteImage","thisImage","ImagesNewController","imagesNew","addDesign","gardenImages","search","ItemsNewController","searchAmazon","itemsNew","displayedResults","itemsSearched","searchTerm","$promise","data","ItemSearchResponse","Items","ItemAttributes","Title","LargeImage","URL","description","Feature","price","ListPrice","FormattedPrice","createNew","item_type","ItemsIndexController","addItem","itemsIndex","ItemsShowController","deleteItem","itemsShow","ItemsEditController","itemsEdit","MainController","logout","protectPages","e","toState","payload","main","currentUser","protectedPages","includes","preventDefault","message","$on","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","TilesIndexController","tilesIndex","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","Number","UsersEditController","usersEdit","angular","module","constant","window","location","hostname","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'ui.bootstrap'])\n  .constant('API_URL', window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : '//my-garden-design-app.herokuapp.com/api/')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.controller('MyCarouselController', MyCarouselController);\n\n\nMyCarouselController.$inject = ['$scope', 'Garden', '$state'];\nfunction MyCarouselController($scope, Garden, $state) {\n  const myCarousel = this;\n\n  this.galleryItems = [\n      {content: 'First', color: '#B3ECFF'},\n      {content: 'Second', color: '#BA415B'}\n  ];\n  Garden.get({ id: $state.params.id }, (thisGarden) => {\n    for(let i = 0; i < thisGarden.images.length; i++) {\n      $scope.slides.push(thisGarden.images[i]);\n    }\n  });\n\n\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('CommentsNewController', CommentsNewController)\n.controller('CommentsIndexController', CommentsIndexController)\n.controller('CommentsShowController', CommentsShowController)\n.controller('CommentsEditController', CommentsEditController);\n\n\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n\n  commentsNew.comment.garden_id = parseInt($state.params.id);\n  commentsNew.comment.user_id = parseInt($auth.getPayload().id);\n  function create() {\n    console.log('comment: ', commentsNew.comment);\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = create;\n}\n\n\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n  commentsIndex.all = Comment.query();\n}\n\n\n\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth) {\n  const commentsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  commentsShow.comment = Comment.get($state.params);\n\n\n\n\n  function deleteComment() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n  this.deleteComment = deleteComment;\n}\n\n\n\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n  commentsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Design', Design);\n\nDesign.$inject = ['$resource', 'API_URL'];\nfunction Design($resource, API_URL) {\n  return new $resource(`${API_URL}/designs/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('DesignsNewController', DesignsNewController)\n.controller('DesignsIndexController', DesignsIndexController)\n.controller('DesignsShowController', DesignsShowController)\n.controller('DesignsEditController', DesignsEditController);\n\n\n\nDesignsNewController.$inject = ['Design', 'Tile', 'Garden', '$state'];\nfunction DesignsNewController(Design, Tile, Garden, $state) {\n  const designsNew = this;\n  designsNew.design = {};\n  designsNew.design.garden_id = parseInt($state.params.id);\n  designsNew.design.name = null;\n  let designId = null;\n\n  designsNew.selectedClass = 'grass';\n  designsNew.myArr = new Array(200);\n  const tiles = document.getElementById('designGrid').getElementsByTagName('li');\n  designsNew.tile = {};\n\n  Garden.get({ id: $state.params.id }, (garden) => {\n    designsNew.design.name = garden.title;\n  });\n\n\n\n  function tilesCreate() {\n    Garden.get({ id: $state.params.id }, (garden) => {\n      designId = garden.design.id;\n      for (let i=0; i < tiles.length; i++) {\n        designsNew.tile = {};\n        designsNew.tile.image = tiles[i].dataset.image;\n        designsNew.tile.class_type = tiles[i].className;\n        designsNew.tile.position = tiles[i].id;\n        designsNew.tile.design_id = designId;\n        Tile.save(designsNew.tile);\n      }\n      $state.go('itemsNew', {id: $state.params.id});\n    });\n  }\n\n  function create() {\n    Design.save(designsNew.design, () => {\n      designsNew.tilesCreate();\n    });\n  }\n\n  function setClass(texture) {\n    designsNew.selectedClass = texture;\n    designsNew.selectedPng = 'http://downloads2.esri.com/support/TechArticles/blank256.png';\n  }\n\n  function setTile(index) {\n    console.log(tiles[index].className);\n    tiles[index].className = `${designsNew.selectedClass}`;\n    tiles[index].dataset.image = designsNew.selectedPng;\n    tiles[index].innerHTML = `<img src=${designsNew.selectedPng}>`;\n    console.log(tiles[index]);\n  }\n\n  function setPng(string) {\n    designsNew.selectedPng = string;\n    console.log(designsNew.selectedPng, string);\n  }\n\n  designsNew.selectedPng = 'http://downloads2.esri.com/support/TechArticles/blank256.png';\n  this.setPng = setPng;\n  this.tilesCreate = tilesCreate;\n  this.create = create;\n  this.setClass = setClass;\n  this.setTile = setTile;\n}\n\n\n\n\nDesignsIndexController.$inject = ['Design'];\nfunction DesignsIndexController(Design) {\n  const designsIndex = this;\n  designsIndex.all = Design.query();\n}\n\n\n\n\nDesignsShowController.$inject = ['Design', '$state', '$auth'];\nfunction DesignsShowController(Design, $state, $auth) {\n  const designsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  designsShow.design = Design.get($state.params);\n\n  function isCurrentUser() {\n    return designsShow.design.user.id === $auth.getPayload().id;\n  }\n\n  function deleteDesign() {\n    designsShow.design.$remove(() => {\n      $state.go('designsIndex');\n    });\n  }\n  this.isCurrentUser = isCurrentUser;\n  this.deleteDesign = deleteDesign;\n}\n\n\n\n\nDesignsEditController.$inject = ['Design', '$state'];\nfunction DesignsEditController(Design, $state) {\n  const designsEdit = this;\n  designsEdit.design = Design.get($state.params);\n\n  function update() {\n    designsEdit.design.$update(() => {\n      $state.go('designsShow', $state.params);\n    });\n  }\n  designsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    like: { method: 'POST', url: `${API_URL}/gardens/:id/like` },\n    unlike: { method: 'POST', url: `${API_URL}/gardens/:id/unlike` }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, (garden) => {\n      $state.go('imagesNew', {id: garden.id});\n    });\n  }\n  gardensNew.create = create;\n}\n\n\n\n\nGardensIndexController.$inject = ['Garden', '$auth', '$state'];\nfunction GardensIndexController(Garden, $auth, $state) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n\n  function like(garden) {\n    garden.$like(() => {\n      $state.reload();\n    });\n  }\n\n  function unlike(garden) {\n    garden.$unlike(() => {\n      $state.reload();\n    });\n  }\n\n  function hasLiked(garden) {\n    const userId = ($auth.getPayload().id.toString());\n    const likes = garden.likes; {\n      return likes.indexOf(userId) === -1;\n    }\n  }\n\n\n  this.hasLiked = hasLiked;\n  this.like = like;\n  this.unlike = unlike;\n}\n\n\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth', 'Comment', 'Item'];\nfunction GardensShowController(Garden, $state, $auth, Comment, Item) {\n  const gardensShow = this;\n  // const commentsAll = Comment.query();\n  this.isLoggedIn = $auth.isAuthenticated;\n  Garden.get($state.params, (garden) => {\n    gardensShow.garden = garden;\n    getGardenRating(garden);\n    slideInterval();\n  });\n\n  var slideInterval = setInterval(nextSlide,8000);\n\n\n  function showDesign(id) {\n    $state.go('designsShow', {id: id});\n  }\n\n  function isCurrentUser() {\n    return gardensShow.garden.user.id === $auth.getPayload().id;\n  }\n\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  function destroyComment(comment) {\n    Comment.get(comment, (thiscomment) => {\n      thiscomment.$remove();\n      $state.reload();\n    });\n  }\n\n  function getPoster(post) {\n    Comment.get({id: post}, (comment) => {\n      const author = comment.user.username;\n      return { author };\n    });\n  }\n\n  function isCommentPoster(comment) {\n    return comment.user.id === $auth.getPayload().id;\n  }\n\n  function removeItem(item) {\n    Item.get(item, (thisItem) => {\n      const index = thisItem.garden_ids.indexOf(parseInt($state.params.id));\n      thisItem.garden_ids.splice(index, 1);\n      thisItem.$update();\n      gardensShow.garden.$update();\n    });\n  }\n\n  function getGardenRating(garden) {\n    for (let i = 0; i < garden.comments.length; i++) {\n      gardensShow.sum += garden.comments[i].rating;\n    }\n    gardensShow.gardenRating = Math.floor(gardensShow.sum / garden.comments.length);\n  }\n\n  var currentSlide = 0;\n  this.slides = document.querySelectorAll('#slides .slide');\n  console.log(this.slides);\n\n\n\n\n  function nextSlide(){\n    gardensShow.slides[currentSlide].className = 'slide';\n    currentSlide = (currentSlide+1)%gardensShow.slides.length;\n    gardensShow.slides[currentSlide].className = 'slide showing';\n  }\n\n  this.getPoster = getPoster;\n  gardensShow.sum = 0;\n  this.gardenRating = 0;\n  this.removeItem = removeItem;\n  this.isCommentPoster = isCommentPoster;\n  this.destroyComment = destroyComment;\n  this.isCurrentUser = isCurrentUser;\n  this.showDesign = showDesign;\n  this.deleteGarden = deleteGarden;\n}\n\n\n\n\nGardensEditController.$inject = ['Garden', '$state', 'Image', '$rootScope', '$auth'];\nfunction GardensEditController(Garden, $state, Image, $rootScope, $auth) {\n  const gardensEdit = this;\n  Garden.get($state.params, (garden) => {\n    gardensEdit.garden = garden;\n\n    if(garden.user.id !== $auth.getPayload().id) {\n      $state.go('login');\n    }\n  });\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n\n  function deleteImage(image) {\n    Image.get({id: image.id}, (thisImage) => {\n      thisImage.$remove(() => {\n        gardensEdit.garden.$update();\n        $state.reload();\n      });\n    });\n  }\n\n  this.deleteImage = deleteImage;\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ImagesNewController', ImagesNewController);\n// .controller('ImagesIndexController', ImagesIndexController)\n// .controller('ImagesShowController', ImagesShowController)\n// .controller('ImagesEditController', ImagesEditController);\n\n\n\nImagesNewController.$inject = ['Image', '$state', 'Garden'];\nfunction ImagesNewController(Image, $state, Garden) {\n  const imagesNew = this;\n  imagesNew.image = {};\n  imagesNew.image.garden_id = $state.params.id;\n  // console.log($state.params.id);\n  function create() {\n    Image.save(imagesNew.image, () => {\n      $state.reload();\n    });\n  }\n\n  function addDesign() {\n    $state.go('designsNew', {id: $state.params.id});\n  }\n\n  Garden.get({id: ($state.params.id)}, (garden) => {\n    imagesNew.gardenImages = garden.images;\n  });\n\n  imagesNew.addDesign = addDesign;\n  imagesNew.create = create;\n}\n","angular.module('finalProject')\n.factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    search: { url: `${API_URL}/items/search`,\n      method: 'GET',\n      params: {\n        query: '@query'\n      }\n    }\n  });\n}\n","angular.module('finalProject')\n.controller('ItemsNewController', ItemsNewController)\n.controller('ItemsIndexController', ItemsIndexController)\n.controller('ItemsShowController', ItemsShowController)\n.controller('ItemsEditController', ItemsEditController);\n\n\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n  itemsNew.item = {};\n  itemsNew.displayedResults = [];\n  itemsNew.searchTerm = null;\n\n  function searchAmazon() {\n    itemsNew.displayedResults = [];\n    itemsNew.itemsSearched = null;\n    Item.search({query: itemsNew.searchTerm }).$promise.then((data) => {\n      itemsNew.itemsSearched = data.ItemSearchResponse.Items.Item;\n      for (let i = 0; i < itemsNew.itemsSearched.length; i++) {\n        itemsNew.displayedResults.push({\n          name: itemsNew.itemsSearched[i].ItemAttributes.Title,\n          image: itemsNew.itemsSearched[i].LargeImage.URL,\n          description: itemsNew.itemsSearched[i].ItemAttributes.Feature[0],\n          price: itemsNew.itemsSearched[i].ItemAttributes.ListPrice.FormattedPrice\n        });\n      }\n    });\n  }\n\n  function createNew(item) {\n    item.garden_ids = [];\n    item.item_type = itemsNew.item_type;\n    item.garden_ids.push(parseInt($state.params.id));\n    Item.save(item, () => {\n      $state.reload();\n    });\n  }\n\n  this.createNew = createNew;\n  this.searchAmazon = searchAmazon;\n  itemsNew.item.garden_ids = [];\n  itemsNew.garden_id = parseInt($state.params.id);\n  itemsNew.item.garden_ids.push(itemsNew.garden_id);\n\n  function create() {\n    console.log('item: ', itemsNew.item);\n    Item.save(itemsNew.item, () => {\n      $state.reload();\n    });\n  }\n\n  itemsNew.create = create;\n}\n\n\n\n\nItemsIndexController.$inject = ['Item', 'Garden', '$state'];\nfunction ItemsIndexController(Item, Garden, $state) {\n  const itemsIndex = this;\n  itemsIndex.all = Item.query();\n\n  function addItem(item) {\n    console.log(item);\n    Garden.get($state.params, (garden) => {\n      console.log(garden);\n      item.garden_ids.push(garden.id);\n      item.$update();\n      $state.reload();\n    }\n  );}\n  this.addItem = addItem;\n}\n\n\n\n\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  itemsShow.item = Item.get($state.params);\n  // function isCurrentUser() {\n  //   Item.get({ id: ($state.params) }, (item) => {\n  //     itemsShow.item = item;\n  //   });\n  //   return itemsShow.item.user.id === $auth.getPayload().id;\n  // }\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  this.deleteItem = deleteItem;\n}\n\n\n\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  itemsEdit.update = update;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'Garden'];\nfunction MainController($auth, $state, $rootScope, Garden) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  main.message = null;\n  // main.isCurrentUser = isCurrentUser;\n\n\n\n\n\n  // if ($auth.getPayload()) {\n  //   return $auth.getPayload().id;\n  // }\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('landing');\n    });\n  }\n\n\n  const protectedPages = ['gardensEdit', 'itemsNew', 'imagesNew', 'designsNew'];\n\n\n  function protectPages(e, toState) {\n    const payload = $auth.getPayload();\n    if(payload) {\n      main.currentUser = $auth.getPayload().id;\n    }\n    if(!$auth.isAuthenticated() &&\n    protectedPages.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n\n  }\n\n\n\n  $rootScope.$on('$stateChangeStart', protectPages);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('landing', {\n    url: '/',\n    templateUrl: '/templates/landing.html'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardens/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardens/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardens/gardensShow.html'\n    // controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardens/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n  .state('imagesNew', {\n    url: '/gardens/:id/imagesNew',\n    templateUrl: '/templates/images/imagesNew.html',\n    controller: 'ImagesNewController as imagesNew'\n  })\n  .state('itemsIndex', {\n    url: '/items',\n    templateUrl: '/templates/items/itemsIndex.html',\n    controller: 'ItemsIndexController as itemsIndex'\n  })\n  .state('itemsNew', {\n    url: '/gardens/:id/items/new',\n    templateUrl: '/templates/items/itemsNew.html'\n    // controller: 'ItemsNewController as itemsNew'\n  })\n  .state('itemsShow', {\n    url: '/items/:id',\n    templateUrl: '/templates/items/itemsShow.html',\n    controller: 'ItemsShowController as itemsShow'\n  })\n  .state('commentsIndex', {\n    url: '/comments',\n    templateUrl: '/templates/comments.html',\n    controller: 'CommentsIndexController as commentsIndex'\n  })\n  .state('designsIndex', {\n    url: '/designs',\n    templateUrl: '/templates/designs/designsIndex.html',\n    controller: 'DesignsIndexController as designsIndex'\n  })\n  .state('designsNew', {\n    url: '/gardens/:id/designsNew',\n    templateUrl: '/templates/designs/designsNew.html',\n    controller: 'DesignsNewController as designsNew'\n  })\n  .state('designsShow', {\n    url: '/designs/:id',\n    templateUrl: '/templates/designs/designsShow.html',\n    controller: 'DesignsShowController as designsShow'\n  })\n  .state('tilesIndex', {\n    url: '/tiles',\n    templateUrl: '/templates/tilesIndex.html',\n    controller: 'TilesIndexController as tilesIndex'\n  })\n  ;\n\n  $urlRouterProvider.otherwise('/gardens');\n}\n","angular.module('finalProject')\n  .factory('Tile', Tile);\n\nTile.$inject = ['$resource', 'API_URL'];\nfunction Tile($resource, API_URL) {\n  return new $resource(`${API_URL}/tiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TilesIndexController', TilesIndexController);\n\n\nTilesIndexController.$inject = ['Tile'];\nfunction TilesIndexController(Tile) {\n  const tilesIndex = this;\n  tilesIndex.all = Tile.query();\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}