{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/garden.js","js/controllers/gardens.js","js/models/image.js","js/controllers/images.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Garden","$resource","id","update","method","GardensNewController","create","save","gardensNew","garden","user_id","getPayload","GardensIndexController","gardensIndex","all","query","GardensShowController","deleteGarden","gardensShow","$remove","isLoggedIn","isAuthenticated","get","params","GardensEditController","gardensEdit","$update","Image","ImagesNewController","imagesNew","image","reload","garden_id","Item","ItemsNewController","console","log","itemsNew","item","garden_ids","ItemsIndexController","itemsIndex","ItemsShowController","deleteItem","itemsShow","ItemsEditController","itemsEdit","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","parseFloat","preventDefault","main","message","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","isCurrentUser","Number","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, (garden) => {\n      // console.log(garden);\n      // window.location = '/gardens/';\n      $state.go('imagesNew', {id: garden.id});\n    });\n  }\n  gardensNew.create = create;\n}\n\n\n\n\nGardensIndexController.$inject = ['Garden'];\nfunction GardensIndexController(Garden) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n}\n\n\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensShowController(Garden, $state, $auth) {\n  const gardensShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  gardensShow.garden = Garden.get($state.params);\n  // function isCurrentUser() {\n  //   Garden.get({ id: ($state.params) }, (garden) => {\n  //     gardensShow.garden = garden;\n  //   });\n  //   return gardensShow.garden.user.id === $auth.getPayload().id;\n  // }\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n  this.deleteGarden = deleteGarden;\n}\n\n\n\n\nGardensEditController.$inject = ['Garden', '$state'];\nfunction GardensEditController(Garden, $state) {\n  const gardensEdit = this;\n  gardensEdit.garden = Garden.get($state.params);\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ImagesNewController', ImagesNewController);\n// .controller('ImagesIndexController', ImagesIndexController)\n// .controller('ImagesShowController', ImagesShowController)\n// .controller('ImagesEditController', ImagesEditController);\n\n\n\nImagesNewController.$inject = ['Image', '$state'];\nfunction ImagesNewController(Image, $state) {\n  const imagesNew = this;\n  imagesNew.image = {};\n  imagesNew.image.garden_id = $state.params.id;\n  // console.log($state.params.id);\n  function create() {\n    Image.save(imagesNew.image, () => {\n      $state.reload();\n    });\n  }\n  imagesNew.create = create;\n}\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ItemsNewController', ItemsNewController)\n.controller('ItemsIndexController', ItemsIndexController)\n.controller('ItemsShowController', ItemsShowController)\n.controller('ItemsEditController', ItemsEditController);\n\n\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n  itemsNew.item = {};\n\n  itemsNew.item.garden_ids = [];\n  // itemsNew.item.garden_id = parseInt($state.params.id);\n\n  itemsNew.item.garden_ids = [1,2,3];\n  // itemsNew.item.garden_ids.push(itemsNew.item.garden_id);\n  //\n  // console.log(typeof $state.params.id, $state.params.id);\n  // console.log(typeof itemsNew.item.garden_id, itemsNew.item.garden_id);\n  function create() {\n    console.log('item: ', itemsNew.item);\n    Item.save(itemsNew.item, () => {\n      $state.reload();\n    });\n  }\n  itemsNew.create = create;\n}\n\n\n\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n  itemsIndex.all = Item.query();\n}\n\n\n\n\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  itemsShow.item = Item.get($state.params);\n  // function isCurrentUser() {\n  //   Item.get({ id: ($state.params) }, (item) => {\n  //     itemsShow.item = item;\n  //   });\n  //   return itemsShow.item.user.id === $auth.getPayload().id;\n  // }\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  this.deleteItem = deleteItem;\n}\n\n\n\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  itemsEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardens/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardens/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardens/gardensShow.html',\n    controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardens/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n  .state('imagesNew', {\n    url: '/gardens/:id/imagesNew',\n    templateUrl: '/templates/images/imagesNew.html',\n    controller: 'ImagesNewController as imagesNew'\n  })\n  .state('items', {\n    url: '/gardens/:id/items',\n    templateUrl: '/templates/items/itemsNew.html',\n    controller: 'ItemsNewController as itemsNew'\n  })\n  .state('itemsIndex', {\n    url: '/items',\n    templateUrl: '/templates/items/itemsIndex.html',\n    controller: 'ItemsIndexController as itemsIndex'\n  })\n  .state('itemsShow', {\n    url: '/items/:id',\n    templateUrl: '/templates/items/itemsShow.html',\n    controller: 'ItemsShowController as itemsShow'\n  })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}