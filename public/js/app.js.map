{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/carousel.js","js/models/comment.js","js/controllers/comments.js","js/models/design.js","js/controllers/designs.js","js/models/garden.js","js/controllers/gardens.js","js/models/image.js","js/controllers/images.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/tile.js","js/controllers/tiles.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MyCarouselController","$scope","Garden","galleryItems","content","color","get","id","params","thisGarden","i","images","length","slides","push","Comment","$resource","update","method","CommentsNewController","create","console","log","commentsNew","comment","save","reload","garden_id","parseInt","user_id","getPayload","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComment","commentsShow","$remove","isLoggedIn","isAuthenticated","CommentsEditController","commentsEdit","$update","Design","DesignsNewController","Tile","tilesCreate","garden","designId","design","tiles","designsNew","tile","image","dataset","class_type","className","position","design_id","setClass","texture","selectedClass","selectedPng","setTile","index","innerHTML","setPng","string","name","myArr","Array","document","getElementById","getElementsByTagName","title","DesignsIndexController","designsIndex","DesignsShowController","isCurrentUser","designsShow","deleteDesign","DesignsEditController","designsEdit","GardensNewController","gardensNew","GardensIndexController","like","likeUser","toString","likes","indexOf","setTimeout","gardensIndex","GardensShowController","Item","showDesign","gardensShow","deleteGarden","destroyComment","thiscomment","getPoster","post","author","username","isCommentPoster","removeItem","item","thisItem","garden_ids","splice","getGardenRating","comments","sum","rating","gardenRating","Math","floor","nextSlide","currentSlide","slideInterval","setInterval","querySelectorAll","GardensEditController","Image","gardensEdit","deleteImage","thisImage","ImagesNewController","imagesNew","addDesign","search","url","ItemsNewController","searchAmazon","itemsNew","displayedResults","itemsSearched","searchTerm","$promise","data","ItemSearchResponse","Items","ItemAttributes","Title","LargeImage","URL","description","Feature","price","ListPrice","FormattedPrice","createNew","item_type","ItemsIndexController","addItem","itemsIndex","ItemsShowController","deleteItem","itemsShow","ItemsEditController","itemsEdit","MainController","$rootScope","logout","protectPages","e","toState","toParams","parseFloat","myGarden","protectedPages","includes","preventDefault","protectedStates","main","message","currentUser","$on","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","TilesIndexController","tilesIndex","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","Number","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"YAKA,SAASA,MAAKC,EAAeC,GAC3BD,EAAcE,SAAcD,EAA5B,SACAD,EAAcG,UAAeF,EAA7B,YAEAD,EAAcI,YAAc,GCJ9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACrBC,KAAK,WACJL,EAAOM,GAAG,WAPd,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAKpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACjBL,KAAK,WACJL,EAAOM,GAAG,kBAPd,GAAMG,GAAQF,IAEdE,GAAMC,eASND,EAAMR,OAASA,EC7BjB,QAASU,sBAAqBC,EAAQC,EAAQb,GAG5CO,KAAKO,eACAC,QAAS,QAASC,MAAO,YACzBD,QAAS,SAAUC,MAAO,YAE/BH,EAAOI,KAAMC,GAAIlB,EAAOmB,OAAOD,IAAM,SAACE,GACpC,IAAI,GAAIC,GAAI,EAAGA,EAAID,EAAWE,OAAOC,OAAQF,IAC3CT,EAAOY,OAAOC,KAAKL,EAAWE,OAAOD,MCV3C,QAASK,SAAQC,EAAWjC,GAC1B,MAAO,IAAIiC,GAAajC,EAAjB,iBAA2CwB,GAAI,QACpDU,QAAUC,OAAQ,SCGtB,QAASC,uBAAsBJ,EAAS1B,EAAQD,GAM9C,QAASgC,KACPC,QAAQC,IAAI,YAAaC,EAAYC,SACrCT,EAAQU,KAAKF,EAAYC,QAAS,WAChCnC,EAAOqC,WARX,GAAMH,GAAc3B,IACpB2B,GAAYC,WAEZD,EAAYC,QAAQG,UAAYC,SAASvC,EAAOmB,OAAOD,IACvDgB,EAAYC,QAAQK,QAAUD,SAASxC,EAAM0C,aAAavB,IAO1DgB,EAAYH,OAASA,EAOvB,QAASW,yBAAwBhB,GAC/B,GAAMiB,GAAgBpC,IACtBoC,GAAcC,IAAMlB,EAAQmB,QAO9B,QAASC,wBAAuBpB,EAAS1B,EAAQD,GAQ/C,QAASgD,KACPC,EAAab,QAAQc,QAAQ,WAC3BjD,EAAOM,GAAG,mBATd,GAAM0C,GAAezC,IACrBA,MAAK2C,WAAanD,EAAMoD,gBACxBH,EAAab,QAAUT,EAAQT,IAAIjB,EAAOmB,QAU1CZ,KAAKwC,cAAgBA,EAOvB,QAASK,wBAAuB1B,EAAS1B,GAIvC,QAAS4B,KACPyB,EAAalB,QAAQmB,QAAQ,WAC3BtD,EAAOM,GAAG,eAAgBN,EAAOmB,UALrC,GAAMkC,GAAe9C,IACrB8C,GAAalB,QAAUT,EAAQT,IAAIjB,EAAOmB,QAO1CkC,EAAazB,OAASA,EC9DxB,QAAS2B,QAAO5B,EAAWjC,GACzB,MAAO,IAAIiC,GAAajC,EAAjB,gBAA0CwB,GAAI,QACnDU,QAAUC,OAAQ,SCGtB,QAAS2B,sBAAqBD,EAAQE,EAAM5C,EAAQb,GAkBlD,QAAS0D,KACP7C,EAAOI,KAAMC,GAAIlB,EAAOmB,OAAOD,IAAM,SAACyC,GACpCC,EAAWD,EAAOE,OAAO3C,EACzB,KAAK,GAAIG,GAAE,EAAGA,EAAIyC,EAAMvC,OAAQF,IAC9B0C,EAAWC,QACXD,EAAWC,KAAKC,MAAQH,EAAMzC,GAAG6C,QAAQD,MACzCF,EAAWC,KAAKG,WAAaL,EAAMzC,GAAG+C,UACtCL,EAAWC,KAAKK,SAAWP,EAAMzC,GAAGH,GACpC6C,EAAWC,KAAKM,UAAYV,EAC5BH,EAAKrB,KAAK2B,EAAWC,KAEvBhE,GAAOM,GAAG,YAAaY,GAAIlB,EAAOmB,OAAOD,OAI7C,QAASa,KACPwB,EAAOnB,KAAK2B,EAAWF,OAAQ,WAC7BE,EAAWL,gBAIf,QAASa,GAASC,GAChBT,EAAWU,cAAgBD,EAC3BT,EAAWW,YAAc,+DAG3B,QAASC,GAAQC,GACf5C,QAAQC,IAAI6B,EAAMc,GAAOR,WACzBN,EAAMc,GAAOR,UAAb,GAA4BL,EAAWU,cACvCX,EAAMc,GAAOV,QAAQD,MAAQF,EAAWW,YACxCZ,EAAMc,GAAOC,UAAb,YAAqCd,EAAWW,YAAhD,IACA1C,QAAQC,IAAI6B,EAAMc,IAGpB,QAASE,GAAOC,GACdhB,EAAWW,YAAcK,EACzB/C,QAAQC,IAAI8B,EAAWW,YAAaK,GArDtC,GAAMhB,GAAaxD,IACnBwD,GAAWF,UACXE,EAAWF,OAAOvB,UAAYC,SAASvC,EAAOmB,OAAOD,IACrD6C,EAAWF,OAAOmB,KAAO,IACzB,IAAIpB,GAAW,IAEfG,GAAWU,cAAgB,QAC3BV,EAAWkB,MAAQ,GAAIC,OAAM,IAC7B,IAAMpB,GAAQqB,SAASC,eAAe,cAAcC,qBAAqB,KACzEtB,GAAWC,QAEXnD,EAAOI,KAAMC,GAAIlB,EAAOmB,OAAOD,IAAM,SAACyC,GACpCI,EAAWF,OAAOmB,KAAOrB,EAAO2B,QA4ClCvB,EAAWW,YAAc,+DACzBnE,KAAKuE,OAASA,EACdvE,KAAKmD,YAAcA,EACnBnD,KAAKwB,OAASA,EACdxB,KAAKgE,SAAWA,EAChBhE,KAAKoE,QAAUA,EAOjB,QAASY,wBAAuBhC,GAC9B,GAAMiC,GAAejF,IACrBiF,GAAa5C,IAAMW,EAAOV,QAO5B,QAAS4C,uBAAsBlC,EAAQvD,EAAQD,GAK7C,QAAS2F,KACP,MAAOC,GAAY9B,OAAOzD,KAAKc,KAAOnB,EAAM0C,aAAavB,GAG3D,QAAS0E,KACPD,EAAY9B,OAAOZ,QAAQ,WACzBjD,EAAOM,GAAG,kBAVd,GAAMqF,GAAcpF,IACpBA,MAAK2C,WAAanD,EAAMoD,gBACxBwC,EAAY9B,OAASN,EAAOtC,IAAIjB,EAAOmB,QAWvCZ,KAAKmF,cAAgBA,EACrBnF,KAAKqF,aAAeA,EAOtB,QAASC,uBAAsBtC,EAAQvD,GAIrC,QAAS4B,KACPkE,EAAYjC,OAAOP,QAAQ,WACzBtD,EAAOM,GAAG,cAAeN,EAAOmB,UALpC,GAAM2E,GAAcvF,IACpBuF,GAAYjC,OAASN,EAAOtC,IAAIjB,EAAOmB,QAOvC2E,EAAYlE,OAASA,EClHvB,QAASf,QAAOc,EAAWjC,GACzB,MAAO,IAAIiC,GAAajC,EAAjB,gBAA0CwB,GAAI,QACnDU,QAAUC,OAAQ,SCGtB,QAASkE,sBAAqBlF,EAAQb,EAAQD,GAK5C,QAASgC,KACPlB,EAAOuB,KAAK4D,EAAWrC,OAAQ,SAACA,GAC9B3D,EAAOM,GAAG,aAAcY,GAAIyC,EAAOzC,OANvC,GAAM8E,GAAazF,IACnByF,GAAWrC,UACXqC,EAAWrC,OAAOnB,QAAUzC,EAAM0C,aAAavB,GAO/C8E,EAAWjE,OAASA,EAOtB,QAASkE,wBAAuBpF,EAAQd,EAAOC,GAK7C,QAASkG,GAAKhF,GACZL,EAAOI,KAAKC,GAAIA,GAAK,SAACyC,GACpB,GAAMwC,GAAYpG,EAAM0C,aAAavB,GAAIkF,UACtCzC,GAAO0C,MAAMC,QAAQH,MAAc,GACpCxC,EAAO0C,MAAM5E,KAAK0E,GAEpBxC,EAAOL,YAETiD,WAAW,WACTvG,EAAOqC,UACN,KAdL,GAAMmE,GAAejG,IACrBiG,GAAa5D,IAAM/B,EAAOgC,QAgB1BtC,KAAK2F,KAAOA,EAOd,QAASO,uBAAsB5F,EAAQb,EAAQD,EAAO2B,EAASgF,GAa7D,QAASC,GAAWzF,GAClBlB,EAAOM,GAAG,eAAgBY,GAAIA,IAGhC,QAASwE,KACP,MAAOkB,GAAYjD,OAAOvD,KAAKc,KAAOnB,EAAM0C,aAAavB,GAG3D,QAAS2F,KACPD,EAAYjD,OAAOV,QAAQ,WACzBjD,EAAOM,GAAG,kBAId,QAASwG,GAAe3E,GACtBT,EAAQT,IAAIkB,EAAS,SAAC4E,GACpBA,EAAY9D,UACZjD,EAAOqC,WAIX,QAAS2E,GAAUC,GACjBvF,EAAQT,KAAKC,GAAI+F,GAAO,SAAC9E,GACvB,GAAM+E,GAAS/E,EAAQ/B,KAAK+G,QAC5B,QAASD,OAAAA,KAIb,QAASE,GAAgBjF,GACvB,MAAOA,GAAQK,UAAYzC,EAAM0C,aAAavB,GAGhD,QAASmG,GAAWC,GAClBZ,EAAKzF,IAAIqG,EAAM,SAACC,GACd,GAAM3C,GAAQ2C,EAASC,WAAWlB,QAAQ/D,SAASvC,EAAOmB,OAAOD,IACjEqG,GAASC,WAAWC,OAAO7C,EAAO,GAClC2C,EAASjE,UACTsD,EAAYjD,OAAOL,YAIvB,QAASoE,GAAgB/D,GACvB,IAAK,GAAItC,GAAI,EAAGA,EAAIsC,EAAOgE,SAASpG,OAAQF,IAC1CuF,EAAYgB,KAAOjE,EAAOgE,SAAStG,GAAGwG,MAExCjB,GAAYkB,aAAeC,KAAKC,MAAMpB,EAAYgB,IAAMjE,EAAOgE,SAASpG,QAU1E,QAAS0G,KACPrB,EAAYpF,OAAO0G,GAAc9D,UAAY,QAC7C8D,GAAgBA,EAAa,GAAGtB,EAAYpF,OAAOD,OACnDqF,EAAYpF,OAAO0G,GAAc9D,UAAY,gBAtE/C,GAAMwC,GAAcrG,IAEpBA,MAAK2C,WAAanD,EAAMoD,gBACxBtC,EAAOI,IAAIjB,EAAOmB,OAAQ,SAACwC,GACzBiD,EAAYjD,OAASA,EACrB+D,EAAgB/D,GAChBwE,KAGF,IAAIA,GAAgBC,YAAYH,EAAU,KAmDtCC,EAAe,CACnB3H,MAAKiB,OAAS2D,SAASkD,iBAAiB,kBACxCrG,QAAQC,IAAI1B,KAAKiB,QAWjBjB,KAAKyG,UAAYA,EACjBJ,EAAYgB,IAAM,EAClBrH,KAAKuH,aAAe,EACpBvH,KAAK8G,WAAaA,EAClB9G,KAAK6G,gBAAkBA,EACvB7G,KAAKuG,eAAiBA,EACtBvG,KAAKmF,cAAgBA,EACrBnF,KAAKoG,WAAaA,EAClBpG,KAAKsG,aAAeA,EAOtB,QAASyB,uBAAsBzH,EAAQb,EAAQuI,GAI7C,QAAS3G,KACP4G,EAAY7E,OAAOL,QAAQ,WACzBtD,EAAOM,GAAG,cAAeN,EAAOmB,UAIpC,QAASsH,GAAYxE,GACnBsE,EAAMtH,KAAKC,GAAI+C,EAAM/C,IAAK,SAACwH,GACzBA,EAAUzF,QAAQ,WAChBuF,EAAY7E,OAAOL,UACnBtD,EAAOqC,aAbb,GAAMmG,GAAcjI,IACpBiI,GAAY7E,OAAS9C,EAAOI,IAAIjB,EAAOmB,QAiBvCZ,KAAKkI,YAAcA,EACnBD,EAAY5G,OAASA,EC5JvB,QAAS2G,OAAM5G,EAAWjC,GACxB,MAAO,IAAIiC,GAAajC,EAAjB,eAAyCwB,GAAI,QAClDU,QAAUC,OAAQ,SCGtB,QAAS8G,qBAAoBJ,EAAOvI,GAKlC,QAAS+B,KACPwG,EAAMnG,KAAKwG,EAAU3E,MAAO,WAC1BjE,EAAOqC,WAIX,QAASwG,KACP7I,EAAOM,GAAG,cAAeY,GAAIlB,EAAOmB,OAAOD,KAX7C,GAAM0H,GAAYrI,IAClBqI,GAAU3E,SACV2E,EAAU3E,MAAM3B,UAAYtC,EAAOmB,OAAOD,GAW1C0H,EAAUC,UAAYA,EACtBD,EAAU7G,OAASA,ECpBrB,QAAS2E,MAAK/E,EAAWjC,GACvB,MAAO,IAAIiC,GAAajC,EAAjB,cAAwCwB,GAAI,QACjDU,QAAUC,OAAQ,OAClBiH,QAAUC,IAAQrJ,EAAR,gBACRmC,OAAQ,MACRV,QACE0B,MAAO,aCDf,QAASmG,oBAAmBtC,EAAM1G,GAMhC,QAASiJ,KACPC,EAASC,oBACTD,EAASE,cAAgB,KACzB1C,EAAKoC,QAAQjG,MAAOqG,EAASG,aAAcC,SAASjJ,KAAK,SAACkJ,GACxDL,EAASE,cAAgBG,EAAKC,mBAAmBC,MAAM/C,IACvD,KAAK,GAAIrF,GAAI,EAAGA,EAAI6H,EAASE,cAAc7H,OAAQF,IACjD6H,EAASC,iBAAiB1H,MACxBuD,KAAMkE,EAASE,cAAc/H,GAAGqI,eAAeC,MAC/C1F,MAAOiF,EAASE,cAAc/H,GAAGuI,WAAWC,IAC5CC,YAAaZ,EAASE,cAAc/H,GAAGqI,eAAeK,QAAQ,GAC9DC,MAAOd,EAASE,cAAc/H,GAAGqI,eAAeO,UAAUC,mBAMlE,QAASC,GAAU7C,GACjBA,EAAKE,cACLF,EAAK8C,UAAYlB,EAASkB,UAC1B9C,EAAKE,WAAW/F,KAAKc,SAASvC,EAAOmB,OAAOD,KAC5CwF,EAAKtE,KAAKkF,EAAM,WACdtH,EAAOqC,WAUX,QAASN,KACPC,QAAQC,IAAI,SAAUiH,EAAS5B,MAC/BZ,EAAKtE,KAAK8G,EAAS5B,KAAM,WACvBtH,EAAOqC,WAvCX,GAAM6G,GAAW3I,IACjB2I,GAAS5B,QACT4B,EAASC,oBACTD,EAASG,WAAa,KA2BtB9I,KAAK4J,UAAYA,EACjB5J,KAAK0I,aAAeA,EACpBC,EAAS5B,KAAKE,cACd0B,EAAS5G,UAAYC,SAASvC,EAAOmB,OAAOD,IAC5CgI,EAAS5B,KAAKE,WAAW/F,KAAKyH,EAAS5G,WASvC4G,EAASnH,OAASA,EAOpB,QAASsI,sBAAqB3D,EAAM7F,EAAQb,GAI1C,QAASsK,GAAQhD,GACftF,QAAQC,IAAIqF,GACZzG,EAAOI,IAAIjB,EAAOmB,OAAQ,SAACwC,GACzB3B,QAAQC,IAAI0B,GACZ2D,EAAKE,WAAW/F,KAAKkC,EAAOzC,IAC5BoG,EAAKhE,YART,GAAMiH,GAAahK,IACnBgK,GAAW3H,IAAM8D,EAAK7D,QAUtBtC,KAAK+J,QAAUA,EAOjB,QAASE,qBAAoB9D,EAAM1G,EAAQD,GAUzC,QAAS0K,KACPC,EAAUpD,KAAKrE,QAAQ,WACrBjD,EAAOM,GAAG,gBAXd,GAAMoK,GAAYnK,IAClBA,MAAK2C,WAAanD,EAAMoD,gBACxBuH,EAAUpD,KAAOZ,EAAKzF,IAAIjB,EAAOmB,QAYjCZ,KAAKkK,WAAaA,EAOpB,QAASE,qBAAoBjE,EAAM1G,GAIjC,QAAS4B,KACPgJ,EAAUtD,KAAKhE,QAAQ,WACrBtD,EAAOM,GAAG,YAAaN,EAAOmB,UALlC,GAAMyJ,GAAYrK,IAClBqK,GAAUtD,KAAOZ,EAAKzF,IAAIjB,EAAOmB,QAOjCyJ,EAAUhJ,OAASA,EC1GrB,QAASiJ,gBAAe9K,EAAOC,EAAQ8K,EAAYjK,GAOjD,QAASkK,KACPhL,EAAMgL,SACL1K,KAAK,WACJL,EAAOM,GAAG,gBAQd,QAAS0K,GAAaC,EAAGC,EAASC,GAChCtK,EAAOI,KAAKC,GAAIkK,WAAWD,EAASjK,KAAM,SAACmK,GACzCrJ,QAAQC,IAAIoJ,IACPtL,EAAMoD,mBACXmI,EAAeC,SAASL,EAAQlG,OAC/BsG,EAAehF,QAAQ4E,EAAQlG,SAAU,GAAQoG,WAAWC,EAASjL,KAAKc,MAAQnB,EAAM0C,aAAavB,IACpG+J,EAAEO,iBACFxL,EAAOM,GAAG,YACCP,EAAMoD,mBACnBsI,EAAgBF,SAASL,EAAQlG,OAChCyG,EAAgBnF,QAAQ4E,EAAQlG,SAAU,GAAQoG,WAAWD,EAASjK,MAAQnB,EAAM0C,aAAavB,MAChG+J,EAAEO,iBACFxL,EAAOM,GAAG,YA7BhB,GAAMoL,GAAOnL,IAEbmL,GAAKxI,WAAanD,EAAMoD,gBACxBuI,EAAKC,QAAU,KACfD,EAAKE,YAAc7L,EAAM0C,aAAavB,EAUtC,IAAMoK,IAAkB,cAAe,WAAY,YAAa,cAqB1DG,GAAmB,YAIzBX,GAAWe,IAAI,oBAAqBb,GAEpCU,EAAKX,OAASA,EC1ChB,QAASe,QAAOC,EAAgBC,GAC9BD,EACCE,MAAM,WACLlD,IAAK,IACLmD,YAAa,4BAEdD,MAAM,cACLlD,IAAK,SACLmD,YAAa,mCACbC,WAAY,uCAEbF,MAAM,aACLlD,IAAK,aACLmD,YAAa,kCACbC,WAAY,qCAEbF,MAAM,aACLlD,IAAK,kBACLmD,YAAa,kCACbC,WAAY,qCAEbF,MAAM,cACLlD,IAAK,eACLmD,YAAa,qCACbC,WAAY,uCAEbF,MAAM,gBACLlD,IAAK,WACLmD,YAAa,uCACbC,WAAY,2CAEbF,MAAM,eACLlD,IAAK,eACLmD,YAAa,wCAGdD,MAAM,eACLlD,IAAK,oBACLmD,YAAa,sCACbC,WAAY,yCAEbF,MAAM,aACLlD,IAAK,yBACLmD,YAAa,mCACbC,WAAY,qCAEbF,MAAM,cACLlD,IAAK,SACLmD,YAAa,mCACbC,WAAY,uCAEbF,MAAM,YACLlD,IAAK,yBACLmD,YAAa,mCAGdD,MAAM,aACLlD,IAAK,aACLmD,YAAa,kCACbC,WAAY,qCAEbF,MAAM,iBACLlD,IAAK,YACLmD,YAAa,2BACbC,WAAY,6CAEbF,MAAM,gBACLlD,IAAK,WACLmD,YAAa,uCACbC,WAAY,2CAEbF,MAAM,cACLlD,IAAK,0BACLmD,YAAa,qCACbC,WAAY,uCAEbF,MAAM,eACLlD,IAAK,eACLmD,YAAa,sCACbC,WAAY,yCAEbF,MAAM,cACLlD,IAAK,SACLmD,YAAa,6BACbC,WAAY,uCAEXF,MAAM,YACLlD,IAAK,YACLmD,YAAa,2BACbC,WAAY,mCAEbF,MAAM,SACLlD,IAAK,SACLmD,YAAa,wBACbC,WAAY,6BAGhBH,EAAmBI,UAAU,YCjG/B,QAAS3I,MAAK9B,EAAWjC,GACvB,MAAO,IAAIiC,GAAajC,EAAjB,cAAwCwB,GAAI,QACjDU,QAAUC,OAAQ,SCDtB,QAASwK,sBAAqB5I,GAC5B,GAAM6I,GAAa/L,IACnB+L,GAAW1J,IAAMa,EAAKZ,QCHxB,QAAS0J,MAAK5K,EAAWjC,GACvB,MAAO,IAAIiC,GAAajC,EAAjB,cAAwCwB,GAAI,QACjDU,QAAUC,OAAQ,SCCtB,QAAS2K,sBAAqBD,GAC5B,GAAME,GAAalM,IACnBkM,GAAW7J,IAAM2J,EAAK1J,QAKxB,QAAS6J,qBAAoBH,EAAMvM,EAAQD,GAKzC,QAAS4M,KACPC,EAAUxM,KAAK6C,QAAQ,WACrBjD,EAAOM,GAAG,gBAId,QAASoF,KACP,MAAO3F,GAAM0C,aAAavB,KAAO2L,OAAO7M,EAAOmB,OAAOD,IAXxD,GAAM0L,GAAYrM,IAClBA,MAAK2C,WAAanD,EAAMoD,gBACxByJ,EAAUxM,KAAOmM,EAAKtL,IAAIjB,EAAOmB,QAWjCyL,EAAUlH,cAAgBA,EAC1BkH,EAAUxM,KAAOmM,EAAKtL,IAAIjB,EAAOmB,QACjCyL,EAAUD,WAAaA,EAKzB,QAASG,qBAAoBP,EAAMvM,GAKjC,QAAS4B,KACPmL,EAAU3M,KAAKkD,QAAQ,WACrBtD,EAAOM,GAAG,YAAaN,EAAOmB,UANlC,GAAM4L,GAAYxM,IAElBwM,GAAU3M,KAAOmM,EAAKtL,IAAIjB,EAAOmB,QAOjC4L,EAAUnL,OAASA,ElB7CrBoL,QAAQC,OAAO,gBAAiB,aAAc,YAAa,aAAc,iBACtEC,SAAS,UAAW,6BACpBC,OAAO3N,MAEVA,KAAK4N,SAAW,gBAAiB,WCJjCJ,QAAQC,OAAO,gBACZd,WAAW,qBAAsBrM,oBACjCqM,WAAW,kBAAmB3L,iBAEjCV,mBAAmBsN,SAAW,QAAS,UAiBvC5M,gBAAgB4M,SAAW,QAAS,UCrBpCJ,QAAQC,OAAO,gBACdd,WAAW,uBAAwBxL,sBAGpCA,qBAAqByM,SAAW,SAAU,SAAU,UCJpDJ,QAAQC,OAAO,gBACZI,QAAQ,UAAW3L,SAEtBA,QAAQ0L,SAAW,YAAa,WCHhCJ,QAAQC,OAAO,gBACdd,WAAW,wBAAyBrK,uBACpCqK,WAAW,0BAA2BzJ,yBACtCyJ,WAAW,yBAA0BrJ,wBACrCqJ,WAAW,yBAA0B/I,wBAItCtB,sBAAsBsL,SAAW,UAAW,SAAU,SAmBtD1K,wBAAwB0K,SAAW,WASnCtK,uBAAuBsK,SAAW,UAAW,SAAU,SAoBvDhK,uBAAuBgK,SAAW,UAAW,UCxD7CJ,QAAQC,OAAO,gBACZI,QAAQ,SAAU9J,QAErBA,OAAO6J,SAAW,YAAa,WCH/BJ,QAAQC,OAAO,gBACdd,WAAW,uBAAwB3I,sBACnC2I,WAAW,yBAA0B5G,wBACrC4G,WAAW,wBAAyB1G,uBACpC0G,WAAW,wBAAyBtG,uBAIrCrC,qBAAqB4J,SAAW,SAAU,OAAQ,SAAU,UAqE5D7H,uBAAuB6H,SAAW,UASlC3H,sBAAsB2H,SAAW,SAAU,SAAU,SAsBrDvH,sBAAsBuH,SAAW,SAAU,UC5G3CJ,QAAQC,OAAO,gBACZI,QAAQ,SAAUxM,QAErBA,OAAOuM,SAAW,YAAa,WCH/BJ,QAAQC,OAAO,gBACdd,WAAW,uBAAwBpG,sBACnCoG,WAAW,yBAA0BlG,wBACrCkG,WAAW,wBAAyB1F,uBACpC0F,WAAW,wBAAyB7D,uBAIrCvC,qBAAqBqH,SAAW,SAAU,SAAU,SAiBpDnH,uBAAuBmH,SAAW,SAAU,QAAS,UAyBrD3G,sBAAsB2G,SAAW,SAAU,SAAU,QAAS,UAAW,QAyFzE9E,sBAAsB8E,SAAW,SAAU,SAAU,SC3IrDJ,QAAQC,OAAO,gBACZI,QAAQ,QAAS9E,OAEpBA,MAAM6E,SAAW,YAAa,WCH9BJ,QAAQC,OAAO,gBACdd,WAAW,sBAAuBxD,qBAOnCA,oBAAoByE,SAAW,QAAS,UCRxCJ,QAAQC,OAAO,gBACdI,QAAQ,OAAQ3G,MAEjBA,KAAK0G,SAAW,YAAa,WCH7BJ,QAAQC,OAAO,gBACdd,WAAW,qBAAsBnD,oBACjCmD,WAAW,uBAAwB9B,sBACnC8B,WAAW,sBAAuB3B,qBAClC2B,WAAW,sBAAuBxB,qBAInC3B,mBAAmBoE,SAAW,OAAQ,UAmDtC/C,qBAAqB+C,SAAW,OAAQ,SAAU,UAmBlD5C,oBAAoB4C,SAAW,OAAQ,SAAU,SAsBjDzC,oBAAoByC,SAAW,OAAQ,UCpGvCJ,QAAQC,OAAO,gBACdd,WAAW,iBAAkBtB,gBAE9BA,eAAeuC,SAAW,QAAS,SAAU,aAAc,UCH3DJ,QAAQC,OAAO,gBACZE,OAAOrB,QAEVA,OAAOsB,SAAW,iBAAkB,sBCHpCJ,QAAQC,OAAO,gBACZI,QAAQ,OAAQ5J,MAEnBA,KAAK2J,SAAW,YAAa,WCH7BJ,QAAQC,OAAO,gBACZd,WAAW,uBAAwBE,sBAGtCA,qBAAqBe,SAAW,QCJhCJ,QAAQC,OAAO,gBACZI,QAAQ,OAAQd,MAEnBA,KAAKa,SAAW,YAAa,WCH7BJ,QAAQC,OAAO,gBACdd,WAAW,uBAAwBK,sBACnCL,WAAW,sBAAuBO,qBAClCP,WAAW,sBAAuBW,qBAGnCN,qBAAqBY,SAAW,QAOhCV,oBAAoBU,SAAW,OAAQ,SAAU,SAqBjDN,oBAAoBM,SAAW,OAAQ","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'ui.bootstrap'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.controller('MyCarouselController', MyCarouselController);\n\n\nMyCarouselController.$inject = ['$scope', 'Garden', '$state'];\nfunction MyCarouselController($scope, Garden, $state) {\n  const myCarousel = this;\n\n  this.galleryItems = [\n      {content: 'First', color: '#B3ECFF'},\n      {content: 'Second', color: '#BA415B'}\n  ];\n  Garden.get({ id: $state.params.id }, (thisGarden) => {\n    for(let i = 0; i < thisGarden.images.length; i++) {\n      $scope.slides.push(thisGarden.images[i]);\n    }\n  });\n\n\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('CommentsNewController', CommentsNewController)\n.controller('CommentsIndexController', CommentsIndexController)\n.controller('CommentsShowController', CommentsShowController)\n.controller('CommentsEditController', CommentsEditController);\n\n\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n\n  commentsNew.comment.garden_id = parseInt($state.params.id);\n  commentsNew.comment.user_id = parseInt($auth.getPayload().id);\n  function create() {\n    console.log('comment: ', commentsNew.comment);\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = create;\n}\n\n\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n  commentsIndex.all = Comment.query();\n}\n\n\n\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth) {\n  const commentsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  commentsShow.comment = Comment.get($state.params);\n\n\n\n\n  function deleteComment() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n  this.deleteComment = deleteComment;\n}\n\n\n\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n  commentsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Design', Design);\n\nDesign.$inject = ['$resource', 'API_URL'];\nfunction Design($resource, API_URL) {\n  return new $resource(`${API_URL}/designs/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('DesignsNewController', DesignsNewController)\n.controller('DesignsIndexController', DesignsIndexController)\n.controller('DesignsShowController', DesignsShowController)\n.controller('DesignsEditController', DesignsEditController);\n\n\n\nDesignsNewController.$inject = ['Design', 'Tile', 'Garden', '$state'];\nfunction DesignsNewController(Design, Tile, Garden, $state) {\n  const designsNew = this;\n  designsNew.design = {};\n  designsNew.design.garden_id = parseInt($state.params.id);\n  designsNew.design.name = null;\n  let designId = null;\n\n  designsNew.selectedClass = 'grass';\n  designsNew.myArr = new Array(200);\n  const tiles = document.getElementById('designGrid').getElementsByTagName('li');\n  designsNew.tile = {};\n\n  Garden.get({ id: $state.params.id }, (garden) => {\n    designsNew.design.name = garden.title;\n  });\n\n\n\n  function tilesCreate() {\n    Garden.get({ id: $state.params.id }, (garden) => {\n      designId = garden.design.id;\n      for (let i=0; i < tiles.length; i++) {\n        designsNew.tile = {};\n        designsNew.tile.image = tiles[i].dataset.image;\n        designsNew.tile.class_type = tiles[i].className;\n        designsNew.tile.position = tiles[i].id;\n        designsNew.tile.design_id = designId;\n        Tile.save(designsNew.tile);\n      }\n      $state.go('itemsNew', {id: $state.params.id});\n    });\n  }\n\n  function create() {\n    Design.save(designsNew.design, () => {\n      designsNew.tilesCreate();\n    });\n  }\n\n  function setClass(texture) {\n    designsNew.selectedClass = texture;\n    designsNew.selectedPng = 'http://downloads2.esri.com/support/TechArticles/blank256.png';\n  }\n\n  function setTile(index) {\n    console.log(tiles[index].className);\n    tiles[index].className = `${designsNew.selectedClass}`;\n    tiles[index].dataset.image = designsNew.selectedPng;\n    tiles[index].innerHTML = `<img src=${designsNew.selectedPng}>`;\n    console.log(tiles[index]);\n  }\n\n  function setPng(string) {\n    designsNew.selectedPng = string;\n    console.log(designsNew.selectedPng, string);\n  }\n\n  designsNew.selectedPng = 'http://downloads2.esri.com/support/TechArticles/blank256.png';\n  this.setPng = setPng;\n  this.tilesCreate = tilesCreate;\n  this.create = create;\n  this.setClass = setClass;\n  this.setTile = setTile;\n}\n\n\n\n\nDesignsIndexController.$inject = ['Design'];\nfunction DesignsIndexController(Design) {\n  const designsIndex = this;\n  designsIndex.all = Design.query();\n}\n\n\n\n\nDesignsShowController.$inject = ['Design', '$state', '$auth'];\nfunction DesignsShowController(Design, $state, $auth) {\n  const designsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  designsShow.design = Design.get($state.params);\n\n  function isCurrentUser() {\n    return designsShow.design.user.id === $auth.getPayload().id;\n  }\n\n  function deleteDesign() {\n    designsShow.design.$remove(() => {\n      $state.go('designsIndex');\n    });\n  }\n  this.isCurrentUser = isCurrentUser;\n  this.deleteDesign = deleteDesign;\n}\n\n\n\n\nDesignsEditController.$inject = ['Design', '$state'];\nfunction DesignsEditController(Design, $state) {\n  const designsEdit = this;\n  designsEdit.design = Design.get($state.params);\n\n  function update() {\n    designsEdit.design.$update(() => {\n      $state.go('designsShow', $state.params);\n    });\n  }\n  designsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, (garden) => {\n      $state.go('imagesNew', {id: garden.id});\n    });\n  }\n  gardensNew.create = create;\n}\n\n\n\n\nGardensIndexController.$inject = ['Garden', '$auth', '$state'];\nfunction GardensIndexController(Garden, $auth, $state) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n\n\n  function like(id) {\n    Garden.get({id: id}, (garden) => {\n      const likeUser = ($auth.getPayload().id).toString();\n      if(garden.likes.indexOf(likeUser) === -1) {\n        garden.likes.push(likeUser);\n      }\n      garden.$update();\n    });\n    setTimeout(function(){\n      $state.reload();\n    }, 500);\n  }\n\n  this.like = like;\n}\n\n\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth', 'Comment', 'Item'];\nfunction GardensShowController(Garden, $state, $auth, Comment, Item) {\n  const gardensShow = this;\n  // const commentsAll = Comment.query();\n  this.isLoggedIn = $auth.isAuthenticated;\n  Garden.get($state.params, (garden) => {\n    gardensShow.garden = garden;\n    getGardenRating(garden);\n    slideInterval();\n  });\n\n  var slideInterval = setInterval(nextSlide,8000);\n\n\n  function showDesign(id) {\n    $state.go('designsShow', {id: id});\n  }\n\n  function isCurrentUser() {\n    return gardensShow.garden.user.id === $auth.getPayload().id;\n  }\n\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  function destroyComment(comment) {\n    Comment.get(comment, (thiscomment) => {\n      thiscomment.$remove();\n      $state.reload();\n    });\n  }\n\n  function getPoster(post) {\n    Comment.get({id: post}, (comment) => {\n      const author = comment.user.username;\n      return { author };\n    });\n  }\n\n  function isCommentPoster(comment) {\n    return comment.user_id === $auth.getPayload().id;\n  }\n\n  function removeItem(item) {\n    Item.get(item, (thisItem) => {\n      const index = thisItem.garden_ids.indexOf(parseInt($state.params.id));\n      thisItem.garden_ids.splice(index, 1);\n      thisItem.$update();\n      gardensShow.garden.$update();\n    });\n  }\n\n  function getGardenRating(garden) {\n    for (let i = 0; i < garden.comments.length; i++) {\n      gardensShow.sum += garden.comments[i].rating;\n    }\n    gardensShow.gardenRating = Math.floor(gardensShow.sum / garden.comments.length);\n  }\n\n  var currentSlide = 0;\n  this.slides = document.querySelectorAll('#slides .slide');\n  console.log(this.slides);\n\n\n\n\n  function nextSlide(){\n    gardensShow.slides[currentSlide].className = 'slide';\n    currentSlide = (currentSlide+1)%gardensShow.slides.length;\n    gardensShow.slides[currentSlide].className = 'slide showing';\n  }\n\n  this.getPoster = getPoster;\n  gardensShow.sum = 0;\n  this.gardenRating = 0;\n  this.removeItem = removeItem;\n  this.isCommentPoster = isCommentPoster;\n  this.destroyComment = destroyComment;\n  this.isCurrentUser = isCurrentUser;\n  this.showDesign = showDesign;\n  this.deleteGarden = deleteGarden;\n}\n\n\n\n\nGardensEditController.$inject = ['Garden', '$state', 'Image'];\nfunction GardensEditController(Garden, $state, Image) {\n  const gardensEdit = this;\n  gardensEdit.garden = Garden.get($state.params);\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n\n  function deleteImage(image) {\n    Image.get({id: image.id}, (thisImage) => {\n      thisImage.$remove(() => {\n        gardensEdit.garden.$update();\n        $state.reload();\n      });\n    });\n  }\n\n  this.deleteImage = deleteImage;\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ImagesNewController', ImagesNewController);\n// .controller('ImagesIndexController', ImagesIndexController)\n// .controller('ImagesShowController', ImagesShowController)\n// .controller('ImagesEditController', ImagesEditController);\n\n\n\nImagesNewController.$inject = ['Image', '$state'];\nfunction ImagesNewController(Image, $state) {\n  const imagesNew = this;\n  imagesNew.image = {};\n  imagesNew.image.garden_id = $state.params.id;\n  // console.log($state.params.id);\n  function create() {\n    Image.save(imagesNew.image, () => {\n      $state.reload();\n    });\n  }\n\n  function addDesign() {\n    $state.go('designsNew', {id: $state.params.id});\n  }\n  imagesNew.addDesign = addDesign;\n  imagesNew.create = create;\n}\n","angular.module('finalProject')\n.factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    search: { url: `${API_URL}/items/search`,\n      method: 'GET',\n      params: {\n        query: '@query'\n      }\n    }\n  });\n}\n","angular.module('finalProject')\n.controller('ItemsNewController', ItemsNewController)\n.controller('ItemsIndexController', ItemsIndexController)\n.controller('ItemsShowController', ItemsShowController)\n.controller('ItemsEditController', ItemsEditController);\n\n\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n  itemsNew.item = {};\n  itemsNew.displayedResults = [];\n  itemsNew.searchTerm = null;\n\n  function searchAmazon() {\n    itemsNew.displayedResults = [];\n    itemsNew.itemsSearched = null;\n    Item.search({query: itemsNew.searchTerm }).$promise.then((data) => {\n      itemsNew.itemsSearched = data.ItemSearchResponse.Items.Item;\n      for (let i = 0; i < itemsNew.itemsSearched.length; i++) {\n        itemsNew.displayedResults.push({\n          name: itemsNew.itemsSearched[i].ItemAttributes.Title,\n          image: itemsNew.itemsSearched[i].LargeImage.URL,\n          description: itemsNew.itemsSearched[i].ItemAttributes.Feature[0],\n          price: itemsNew.itemsSearched[i].ItemAttributes.ListPrice.FormattedPrice\n        });\n      }\n    });\n  }\n\n  function createNew(item) {\n    item.garden_ids = [];\n    item.item_type = itemsNew.item_type;\n    item.garden_ids.push(parseInt($state.params.id));\n    Item.save(item, () => {\n      $state.reload();\n    });\n  }\n\n  this.createNew = createNew;\n  this.searchAmazon = searchAmazon;\n  itemsNew.item.garden_ids = [];\n  itemsNew.garden_id = parseInt($state.params.id);\n  itemsNew.item.garden_ids.push(itemsNew.garden_id);\n\n  function create() {\n    console.log('item: ', itemsNew.item);\n    Item.save(itemsNew.item, () => {\n      $state.reload();\n    });\n  }\n\n  itemsNew.create = create;\n}\n\n\n\n\nItemsIndexController.$inject = ['Item', 'Garden', '$state'];\nfunction ItemsIndexController(Item, Garden, $state) {\n  const itemsIndex = this;\n  itemsIndex.all = Item.query();\n\n  function addItem(item) {\n    console.log(item);\n    Garden.get($state.params, (garden) => {\n      console.log(garden);\n      item.garden_ids.push(garden.id);\n      item.$update();\n    }\n  );}\n  this.addItem = addItem;\n}\n\n\n\n\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  itemsShow.item = Item.get($state.params);\n  // function isCurrentUser() {\n  //   Item.get({ id: ($state.params) }, (item) => {\n  //     itemsShow.item = item;\n  //   });\n  //   return itemsShow.item.user.id === $auth.getPayload().id;\n  // }\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  this.deleteItem = deleteItem;\n}\n\n\n\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  itemsEdit.update = update;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'Garden'];\nfunction MainController($auth, $state, $rootScope, Garden) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.currentUser = $auth.getPayload().id;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n\n  const protectedPages = ['gardensEdit', 'itemsNew', 'imagesNew', 'designsNew'];\n\n\n  function protectPages(e, toState, toParams) {\n    Garden.get({id: parseFloat(toParams.id)}, (myGarden) => {\n      console.log(myGarden);\n      if((!$auth.isAuthenticated() &&\n      protectedPages.includes(toState.name)) ||\n      (protectedPages.indexOf(toState.name) !== -1) && (parseFloat(myGarden.user.id) !== $auth.getPayload().id)) {\n        e.preventDefault();\n        $state.go('login');\n      } else if ((!$auth.isAuthenticated() &&\n      protectedStates.includes(toState.name)) ||\n      (protectedStates.indexOf(toState.name) !== -1) && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n        e.preventDefault();\n        $state.go('login');\n      }\n    });\n  }\n\n\n  const protectedStates = ['usersEdit'];\n\n\n\n  $rootScope.$on('$stateChangeStart', protectPages);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('landing', {\n    url: '/',\n    templateUrl: '/templates/landing.html'\n  })\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardens/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardens/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardens/gardensShow.html'\n    // controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardens/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n  .state('imagesNew', {\n    url: '/gardens/:id/imagesNew',\n    templateUrl: '/templates/images/imagesNew.html',\n    controller: 'ImagesNewController as imagesNew'\n  })\n  .state('itemsIndex', {\n    url: '/items',\n    templateUrl: '/templates/items/itemsIndex.html',\n    controller: 'ItemsIndexController as itemsIndex'\n  })\n  .state('itemsNew', {\n    url: '/gardens/:id/items/new',\n    templateUrl: '/templates/items/itemsNew.html'\n    // controller: 'ItemsNewController as itemsNew'\n  })\n  .state('itemsShow', {\n    url: '/items/:id',\n    templateUrl: '/templates/items/itemsShow.html',\n    controller: 'ItemsShowController as itemsShow'\n  })\n  .state('commentsIndex', {\n    url: '/comments',\n    templateUrl: '/templates/comments.html',\n    controller: 'CommentsIndexController as commentsIndex'\n  })\n  .state('designsIndex', {\n    url: '/designs',\n    templateUrl: '/templates/designs/designsIndex.html',\n    controller: 'DesignsIndexController as designsIndex'\n  })\n  .state('designsNew', {\n    url: '/gardens/:id/designsNew',\n    templateUrl: '/templates/designs/designsNew.html',\n    controller: 'DesignsNewController as designsNew'\n  })\n  .state('designsShow', {\n    url: '/designs/:id',\n    templateUrl: '/templates/designs/designsShow.html',\n    controller: 'DesignsShowController as designsShow'\n  })\n  .state('tilesIndex', {\n    url: '/tiles',\n    templateUrl: '/templates/tilesIndex.html',\n    controller: 'TilesIndexController as tilesIndex'\n  })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/gardens');\n}\n","angular.module('finalProject')\n  .factory('Tile', Tile);\n\nTile.$inject = ['$resource', 'API_URL'];\nfunction Tile($resource, API_URL) {\n  return new $resource(`${API_URL}/tiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TilesIndexController', TilesIndexController);\n\n\nTilesIndexController.$inject = ['Tile'];\nfunction TilesIndexController(Tile) {\n  const tilesIndex = this;\n  tilesIndex.all = Tile.query();\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}