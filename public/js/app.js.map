{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/models/design.js","js/controllers/designs.js","js/models/garden.js","js/controllers/gardens.js","js/models/image.js","js/controllers/images.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/tile.js","js/controllers/tiles.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsNewController","create","console","log","commentsNew","comment","save","reload","garden_id","parseInt","params","user_id","getPayload","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComment","commentsShow","$remove","isLoggedIn","isAuthenticated","get","CommentsEditController","commentsEdit","$update","Design","DesignsNewController","Tile","Garden","tilesCreate","garden","designId","design","i","tiles","length","designsNew","tile","class_type","className","position","design_id","setClass","texture","selectedClass","setTile","index","name","myArr","Array","document","getElementById","getElementsByTagName","title","DesignsIndexController","designsIndex","DesignsShowController","isCurrentUser","designsShow","deleteDesign","DesignsEditController","designsEdit","GardensNewController","gardensNew","GardensIndexController","gardensIndex","GardensShowController","Item","showDesign","gardensShow","deleteGarden","destroyComment","thiscomment","isCommentPoster","removeItem","item","thisItem","garden_ids","indexOf","splice","getGardenRating","comments","sum","rating","gardenRating","Math","floor","GardensEditController","Image","gardensEdit","deleteImage","image","thisImage","ImagesNewController","imagesNew","addDesign","search","url","ItemsNewController","searchAmazon","itemsNew","searchTerm","$promise","data","itemsSearched","ItemSearchResponse","Items","displayedResults","push","ItemAttributes","Title","LargeImage","URL","description","Feature","price","ListPrice","FormattedPrice","createNew","ItemsIndexController","addItem","itemsIndex","ItemsShowController","deleteItem","itemsShow","ItemsEditController","itemsEdit","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","parseFloat","preventDefault","main","message","currentUser","$on","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","TilesIndexController","tilesIndex","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","Number","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'ui.bootstrap'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('CommentsNewController', CommentsNewController)\n.controller('CommentsIndexController', CommentsIndexController)\n.controller('CommentsShowController', CommentsShowController)\n.controller('CommentsEditController', CommentsEditController);\n\n\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n\n  commentsNew.comment.garden_id = parseInt($state.params.id);\n  commentsNew.comment.user_id = parseInt($auth.getPayload().id);\n  function create() {\n    console.log('comment: ', commentsNew.comment);\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = create;\n}\n\n\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n  commentsIndex.all = Comment.query();\n}\n\n\n\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth) {\n  const commentsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  commentsShow.comment = Comment.get($state.params);\n  // function isCurrentUser() {\n  //   Comment.get({ id: ($state.params) }, (comment) => {\n  //     commentsShow.comment = comment;\n  //   });\n  //   return commentsShow.comment.user.id === $auth.getPayload().id;\n  // }\n  function deleteComment() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n  this.deleteComment = deleteComment;\n}\n\n\n\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n  commentsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Design', Design);\n\nDesign.$inject = ['$resource', 'API_URL'];\nfunction Design($resource, API_URL) {\n  return new $resource(`${API_URL}/designs/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('DesignsNewController', DesignsNewController)\n.controller('DesignsIndexController', DesignsIndexController)\n.controller('DesignsShowController', DesignsShowController)\n.controller('DesignsEditController', DesignsEditController);\n\n\n\nDesignsNewController.$inject = ['Design', 'Tile', 'Garden', '$state'];\nfunction DesignsNewController(Design, Tile, Garden, $state) {\n  const designsNew = this;\n  designsNew.design = {};\n  designsNew.design.garden_id = parseInt($state.params.id);\n  designsNew.design.name = null;\n  let designId = null;\n\n  designsNew.selectedClass = 'grass';\n  designsNew.myArr = new Array(200);\n  const tiles = document.getElementById('designGrid').getElementsByTagName('li');\n  designsNew.tile = {};\n\n  Garden.get({ id: $state.params.id }, (garden) => {\n    designsNew.design.name = garden.title;\n  });\n\n\n\n  function tilesCreate() {\n    Garden.get({ id: $state.params.id }, (garden) => {\n      designId = garden.design.id;\n      for (let i=0; i < tiles.length; i++) {\n        designsNew.tile = {};\n        // designsNew.tile.position = tiles.indexOf(tiles[i]);\n        designsNew.tile.class_type = tiles[i].className;\n        designsNew.tile.position = tiles[i].id;\n        designsNew.tile.design_id = designId;\n        Tile.save(designsNew.tile);\n      }\n      $state.go('itemsNew', {id: $state.params.id});\n    });\n  }\n\n  function create() {\n    Design.save(designsNew.design, () => {\n      designsNew.tilesCreate();\n    });\n  }\n\n  function setClass(texture) {\n    designsNew.selectedClass = texture;\n  }\n\n  function setTile(index) {\n    // console.log(tiles[index].className);\n    tiles[index].className = `${designsNew.selectedClass}`;\n  }\n  this.tilesCreate = tilesCreate;\n  this.create = create;\n  this.setClass = setClass;\n  this.setTile = setTile;\n}\n\n\n\n\nDesignsIndexController.$inject = ['Design'];\nfunction DesignsIndexController(Design) {\n  const designsIndex = this;\n  designsIndex.all = Design.query();\n}\n\n\n\n\nDesignsShowController.$inject = ['Design', '$state', '$auth'];\nfunction DesignsShowController(Design, $state, $auth) {\n  const designsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  designsShow.design = Design.get($state.params);\n\n  function isCurrentUser() {\n    return designsShow.design.user.id === $auth.getPayload().id;\n  }\n\n  function deleteDesign() {\n    designsShow.design.$remove(() => {\n      $state.go('designsIndex');\n    });\n  }\n  this.isCurrentUser = isCurrentUser;\n  this.deleteDesign = deleteDesign;\n}\n\n\n\n\nDesignsEditController.$inject = ['Design', '$state'];\nfunction DesignsEditController(Design, $state) {\n  const designsEdit = this;\n  designsEdit.design = Design.get($state.params);\n\n  function update() {\n    designsEdit.design.$update(() => {\n      $state.go('designsShow', $state.params);\n    });\n  }\n  designsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, (garden) => {\n      $state.go('imagesNew', {id: garden.id});\n    });\n  }\n  gardensNew.create = create;\n}\n\n\n\n\nGardensIndexController.$inject = ['Garden'];\nfunction GardensIndexController(Garden) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n}\n\n\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth', 'Comment', 'Item'];\nfunction GardensShowController(Garden, $state, $auth, Comment, Item) {\n  const gardensShow = this;\n  // const commentsAll = Comment.query();\n  this.isLoggedIn = $auth.isAuthenticated;\n  Garden.get($state.params, (garden) => {\n    gardensShow.garden = garden;\n    getGardenRating(garden);\n  });\n  // console.log(gardensShow.garden);\n\n  function showDesign(id) {\n    $state.go('designsShow', {id: id});\n  }\n\n  function isCurrentUser() {\n    return gardensShow.garden.user.id === $auth.getPayload().id;\n  }\n\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  function destroyComment(comment) {\n    Comment.get(comment, (thiscomment) => {\n      thiscomment.$remove();\n      $state.reload();\n    });\n  }\n\n  function isCommentPoster(comment) {\n    return comment.user_id === $auth.getPayload().id;\n  }\n\n  function removeItem(item) {\n    Item.get(item, (thisItem) => {\n      const index = thisItem.garden_ids.indexOf(parseInt($state.params.id));\n      thisItem.garden_ids.splice(index, 1);\n      thisItem.$update();\n      gardensShow.garden.$update();\n      $state.reload();\n    });\n  }\n  function getGardenRating(garden) {\n    for (let i = 0; i < garden.comments.length; i++) {\n      gardensShow.sum += garden.comments[i].rating;\n    }\n    gardensShow.gardenRating = Math.floor(gardensShow.sum / garden.comments.length);\n  }\n  gardensShow.sum = 0;\n  this.gardenRating = 0;\n  this.removeItem = removeItem;\n  this.isCommentPoster = isCommentPoster;\n  this.destroyComment = destroyComment;\n  this.isCurrentUser = isCurrentUser;\n  this.showDesign = showDesign;\n  this.deleteGarden = deleteGarden;\n}\n\n\n\n\nGardensEditController.$inject = ['Garden', '$state', 'Image'];\nfunction GardensEditController(Garden, $state, Image) {\n  const gardensEdit = this;\n  gardensEdit.garden = Garden.get($state.params);\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n\n  function deleteImage(image) {\n    Image.get({id: image.id}, (thisImage) => {\n      thisImage.$remove(() => {\n        gardensEdit.garden.$update();\n        $state.reload();\n      });\n    });\n  }\n\n  this.deleteImage = deleteImage;\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ImagesNewController', ImagesNewController);\n// .controller('ImagesIndexController', ImagesIndexController)\n// .controller('ImagesShowController', ImagesShowController)\n// .controller('ImagesEditController', ImagesEditController);\n\n\n\nImagesNewController.$inject = ['Image', '$state'];\nfunction ImagesNewController(Image, $state) {\n  const imagesNew = this;\n  imagesNew.image = {};\n  imagesNew.image.garden_id = $state.params.id;\n  // console.log($state.params.id);\n  function create() {\n    Image.save(imagesNew.image, () => {\n      $state.reload();\n    });\n  }\n\n  function addDesign() {\n    $state.go('designsNew', {id: $state.params.id});\n  }\n  imagesNew.addDesign = addDesign;\n  imagesNew.create = create;\n}\n","angular.module('finalProject')\n.factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    search: { url: `${API_URL}/items/search`,\n      method: 'GET',\n      params: {\n        query: '@query'\n      }\n    }\n  });\n}\n","angular.module('finalProject')\n.controller('ItemsNewController', ItemsNewController)\n.controller('ItemsIndexController', ItemsIndexController)\n.controller('ItemsShowController', ItemsShowController)\n.controller('ItemsEditController', ItemsEditController);\n\n\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n  itemsNew.item = {};\n  itemsNew.displayedResults = [];\n  itemsNew.searchTerm = null;\n\n  function searchAmazon() {\n    Item.search({query: itemsNew.searchTerm }).$promise.then((data) => {\n      itemsNew.itemsSearched = data.ItemSearchResponse.Items.Item;\n      for (let i = 0; i < itemsNew.itemsSearched.length; i++) {\n        itemsNew.displayedResults.push({\n          name: itemsNew.itemsSearched[i].ItemAttributes.Title,\n          image: itemsNew.itemsSearched[i].LargeImage.URL,\n          description: itemsNew.itemsSearched[i].ItemAttributes.Feature[0],\n          price: itemsNew.itemsSearched[i].ItemAttributes.ListPrice.FormattedPrice\n        });\n      }\n    });\n  }\n\n  function createNew(item) {\n    item.garden_ids = [];\n    item.garden_ids.push(parseInt($state.params.id));\n    Item.save(item, () => {\n      $state.reload();\n    });\n  }\n\n  this.createNew = createNew;\n  this.searchAmazon = searchAmazon;\n  itemsNew.item.garden_ids = [];\n  itemsNew.garden_id = parseInt($state.params.id);\n  itemsNew.item.garden_ids.push(itemsNew.garden_id);\n\n  function create() {\n    console.log('item: ', itemsNew.item);\n    Item.save(itemsNew.item, () => {\n      $state.reload();\n    });\n  }\n  itemsNew.create = create;\n}\n\n\n\n\nItemsIndexController.$inject = ['Item', 'Garden', '$state'];\nfunction ItemsIndexController(Item, Garden, $state) {\n  const itemsIndex = this;\n  itemsIndex.all = Item.query();\n\n  function addItem(item) {\n    console.log(item);\n    Garden.get($state.params, (garden) => {\n      console.log(garden);\n      item.garden_ids.push(garden.id);\n      item.$update();\n    }\n  );}\n  this.addItem = addItem;\n}\n\n\n\n\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  itemsShow.item = Item.get($state.params);\n  // function isCurrentUser() {\n  //   Item.get({ id: ($state.params) }, (item) => {\n  //     itemsShow.item = item;\n  //   });\n  //   return itemsShow.item.user.id === $auth.getPayload().id;\n  // }\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  this.deleteItem = deleteItem;\n}\n\n\n\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  itemsEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.currentUser = $auth.getPayload().id;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardens/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardens/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardens/gardensShow.html'\n    // controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardens/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n  .state('imagesNew', {\n    url: '/gardens/:id/imagesNew',\n    templateUrl: '/templates/images/imagesNew.html',\n    controller: 'ImagesNewController as imagesNew'\n  })\n  .state('itemsIndex', {\n    url: '/items',\n    templateUrl: '/templates/items/itemsIndex.html',\n    controller: 'ItemsIndexController as itemsIndex'\n  })\n  .state('itemsNew', {\n    url: '/gardens/:id/items/new',\n    templateUrl: '/templates/items/itemsNew.html'\n    // controller: 'ItemsNewController as itemsNew'\n  })\n  .state('itemsShow', {\n    url: '/items/:id',\n    templateUrl: '/templates/items/itemsShow.html',\n    controller: 'ItemsShowController as itemsShow'\n  })\n  .state('commentsIndex', {\n    url: '/comments',\n    templateUrl: '/templates/comments.html',\n    controller: 'CommentsIndexController as commentsIndex'\n  })\n  .state('designsIndex', {\n    url: '/designs',\n    templateUrl: '/templates/designs/designsIndex.html',\n    controller: 'DesignsIndexController as designsIndex'\n  })\n  .state('designsNew', {\n    url: '/gardens/:id/designsNew',\n    templateUrl: '/templates/designs/designsNew.html',\n    controller: 'DesignsNewController as designsNew'\n  })\n  .state('designsShow', {\n    url: '/designs/:id',\n    templateUrl: '/templates/designs/designsShow.html',\n    controller: 'DesignsShowController as designsShow'\n  })\n  .state('tilesIndex', {\n    url: '/tiles',\n    templateUrl: '/templates/tilesIndex.html',\n    controller: 'TilesIndexController as tilesIndex'\n  })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/gardens');\n}\n","angular.module('finalProject')\n  .factory('Tile', Tile);\n\nTile.$inject = ['$resource', 'API_URL'];\nfunction Tile($resource, API_URL) {\n  return new $resource(`${API_URL}/tiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TilesIndexController', TilesIndexController);\n\n\nTilesIndexController.$inject = ['Tile'];\nfunction TilesIndexController(Tile) {\n  const tilesIndex = this;\n  tilesIndex.all = Tile.query();\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}