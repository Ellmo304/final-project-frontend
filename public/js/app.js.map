{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/carousel.js","js/models/comment.js","js/controllers/comments.js","js/models/design.js","js/controllers/designs.js","js/models/garden.js","js/controllers/gardens.js","js/models/image.js","js/controllers/images.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/tile.js","js/controllers/tiles.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","CarouselDemoCtrl","$scope","Garden","slides","myInterval","get","id","params","thisGarden","i","images","length","push","Comment","$resource","update","method","CommentsNewController","create","console","log","commentsNew","comment","save","reload","garden_id","parseInt","user_id","getPayload","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComment","commentsShow","$remove","isLoggedIn","isAuthenticated","CommentsEditController","commentsEdit","$update","Design","DesignsNewController","Tile","tilesCreate","garden","designId","design","tiles","designsNew","tile","class_type","className","position","design_id","setClass","texture","selectedClass","setTile","index","innerHTML","selectedPng","setPng","string","name","myArr","Array","document","getElementById","getElementsByTagName","title","DesignsIndexController","designsIndex","DesignsShowController","isCurrentUser","designsShow","deleteDesign","DesignsEditController","designsEdit","GardensNewController","gardensNew","GardensIndexController","like","likeUser","toString","likes","indexOf","setTimeout","gardensIndex","GardensShowController","Item","showDesign","gardensShow","deleteGarden","destroyComment","thiscomment","isCommentPoster","removeItem","item","thisItem","garden_ids","splice","getGardenRating","comments","sum","rating","gardenRating","Math","floor","GardensEditController","Image","gardensEdit","deleteImage","image","thisImage","ImagesNewController","imagesNew","addDesign","search","url","ItemsNewController","searchAmazon","itemsNew","displayedResults","itemsSearched","searchTerm","$promise","data","ItemSearchResponse","Items","ItemAttributes","Title","LargeImage","URL","description","Feature","price","ListPrice","FormattedPrice","createNew","item_type","ItemsIndexController","addItem","itemsIndex","ItemsShowController","deleteItem","itemsShow","ItemsEditController","itemsEdit","MainController","$rootScope","logout","protectPages","e","toState","toParams","parseFloat","myGarden","protectedPages","includes","preventDefault","protectedStates","main","message","currentUser","$on","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","TilesIndexController","tilesIndex","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","Number","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'ui.bootstrap'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.controller('CarouselDemoCtrl', CarouselDemoCtrl);\n\n\nCarouselDemoCtrl.$inject = ['$scope', 'Garden', '$state'];\nfunction CarouselDemoCtrl($scope, Garden, $state) {\n  const myCarousel = this;\n  $scope.slides = [];\n  $scope.myInterval = 3000;\n\n\n  Garden.get({ id: $state.params.id }, (thisGarden) => {\n    for(let i = 0; i < thisGarden.images.length; i++) {\n      $scope.slides.push(thisGarden.images[i]);\n    }\n  });\n\n\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('CommentsNewController', CommentsNewController)\n.controller('CommentsIndexController', CommentsIndexController)\n.controller('CommentsShowController', CommentsShowController)\n.controller('CommentsEditController', CommentsEditController);\n\n\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n\n  commentsNew.comment.garden_id = parseInt($state.params.id);\n  commentsNew.comment.user_id = parseInt($auth.getPayload().id);\n  function create() {\n    console.log('comment: ', commentsNew.comment);\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = create;\n}\n\n\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n  commentsIndex.all = Comment.query();\n}\n\n\n\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth) {\n  const commentsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  commentsShow.comment = Comment.get($state.params);\n  // function isCurrentUser() {\n  //   Comment.get({ id: ($state.params) }, (comment) => {\n  //     commentsShow.comment = comment;\n  //   });\n  //   return commentsShow.comment.user.id === $auth.getPayload().id;\n  // }\n  function deleteComment() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n  this.deleteComment = deleteComment;\n}\n\n\n\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n  commentsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Design', Design);\n\nDesign.$inject = ['$resource', 'API_URL'];\nfunction Design($resource, API_URL) {\n  return new $resource(`${API_URL}/designs/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('DesignsNewController', DesignsNewController)\n.controller('DesignsIndexController', DesignsIndexController)\n.controller('DesignsShowController', DesignsShowController)\n.controller('DesignsEditController', DesignsEditController);\n\n\n\nDesignsNewController.$inject = ['Design', 'Tile', 'Garden', '$state'];\nfunction DesignsNewController(Design, Tile, Garden, $state) {\n  const designsNew = this;\n  designsNew.design = {};\n  designsNew.design.garden_id = parseInt($state.params.id);\n  designsNew.design.name = null;\n  let designId = null;\n\n  designsNew.selectedClass = 'grass';\n  designsNew.myArr = new Array(200);\n  const tiles = document.getElementById('designGrid').getElementsByTagName('li');\n  designsNew.tile = {};\n\n  Garden.get({ id: $state.params.id }, (garden) => {\n    designsNew.design.name = garden.title;\n  });\n\n\n\n  function tilesCreate() {\n    Garden.get({ id: $state.params.id }, (garden) => {\n      designId = garden.design.id;\n      for (let i=0; i < tiles.length; i++) {\n        designsNew.tile = {};\n        designsNew.tile.class_type = tiles[i].className;\n        designsNew.tile.position = tiles[i].id;\n        designsNew.tile.design_id = designId;\n        Tile.save(designsNew.tile);\n      }\n      $state.go('itemsNew', {id: $state.params.id});\n    });\n  }\n\n  function create() {\n    Design.save(designsNew.design, () => {\n      designsNew.tilesCreate();\n    });\n  }\n\n  function setClass(texture) {\n    designsNew.selectedClass = texture;\n  }\n\n  function setTile(index) {\n    console.log(tiles[index].className);\n    tiles[index].className = `${designsNew.selectedClass}`;\n    tiles[index].innerHTML = `<img src=${designsNew.selectedPng}>`;\n    designsNew.selectedPng = 'http://downloads2.esri.com/support/TechArticles/blank256.png';\n    console.log(tiles[index]);\n  }\n\n  function setPng(string) {\n    designsNew.selectedPng = string;\n    console.log(designsNew.selectedPng, string);\n  }\n\n  designsNew.selectedPng = 'http://downloads2.esri.com/support/TechArticles/blank256.png';\n  this.setPng = setPng;\n  this.tilesCreate = tilesCreate;\n  this.create = create;\n  this.setClass = setClass;\n  this.setTile = setTile;\n}\n\n\n\n\nDesignsIndexController.$inject = ['Design'];\nfunction DesignsIndexController(Design) {\n  const designsIndex = this;\n  designsIndex.all = Design.query();\n}\n\n\n\n\nDesignsShowController.$inject = ['Design', '$state', '$auth'];\nfunction DesignsShowController(Design, $state, $auth) {\n  const designsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  designsShow.design = Design.get($state.params);\n\n  function isCurrentUser() {\n    return designsShow.design.user.id === $auth.getPayload().id;\n  }\n\n  function deleteDesign() {\n    designsShow.design.$remove(() => {\n      $state.go('designsIndex');\n    });\n  }\n  this.isCurrentUser = isCurrentUser;\n  this.deleteDesign = deleteDesign;\n}\n\n\n\n\nDesignsEditController.$inject = ['Design', '$state'];\nfunction DesignsEditController(Design, $state) {\n  const designsEdit = this;\n  designsEdit.design = Design.get($state.params);\n\n  function update() {\n    designsEdit.design.$update(() => {\n      $state.go('designsShow', $state.params);\n    });\n  }\n  designsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, (garden) => {\n      $state.go('imagesNew', {id: garden.id});\n    });\n  }\n  gardensNew.create = create;\n}\n\n\n\n\nGardensIndexController.$inject = ['Garden', '$auth', '$state'];\nfunction GardensIndexController(Garden, $auth, $state) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n\n\n  function like(id) {\n    Garden.get({id: id}, (garden) => {\n      const likeUser = ($auth.getPayload().id).toString();\n      if(garden.likes.indexOf(likeUser) === -1) {\n        garden.likes.push(likeUser);\n      }\n      garden.$update();\n    });\n    setTimeout(function(){\n      $state.reload();\n    }, 500);\n  }\n\n  this.like = like;\n}\n\n\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth', 'Comment', 'Item'];\nfunction GardensShowController(Garden, $state, $auth, Comment, Item) {\n  const gardensShow = this;\n  // const commentsAll = Comment.query();\n  this.isLoggedIn = $auth.isAuthenticated;\n  Garden.get($state.params, (garden) => {\n    gardensShow.garden = garden;\n    getGardenRating(garden);\n  });\n  // console.log(gardensShow.garden);\n\n  function showDesign(id) {\n    $state.go('designsShow', {id: id});\n  }\n\n  function isCurrentUser() {\n    return gardensShow.garden.user.id === $auth.getPayload().id;\n  }\n\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n\n  function destroyComment(comment) {\n    Comment.get(comment, (thiscomment) => {\n      thiscomment.$remove();\n      $state.reload();\n    });\n  }\n\n  function isCommentPoster(comment) {\n    return comment.user_id === $auth.getPayload().id;\n  }\n\n  function removeItem(item) {\n    Item.get(item, (thisItem) => {\n      const index = thisItem.garden_ids.indexOf(parseInt($state.params.id));\n      thisItem.garden_ids.splice(index, 1);\n      thisItem.$update();\n      gardensShow.garden.$update();\n    });\n  }\n\n  function getGardenRating(garden) {\n    for (let i = 0; i < garden.comments.length; i++) {\n      gardensShow.sum += garden.comments[i].rating;\n    }\n    gardensShow.gardenRating = Math.floor(gardensShow.sum / garden.comments.length);\n  }\n  gardensShow.sum = 0;\n  this.gardenRating = 0;\n  this.removeItem = removeItem;\n  this.isCommentPoster = isCommentPoster;\n  this.destroyComment = destroyComment;\n  this.isCurrentUser = isCurrentUser;\n  this.showDesign = showDesign;\n  this.deleteGarden = deleteGarden;\n}\n\n\n\n\nGardensEditController.$inject = ['Garden', '$state', 'Image'];\nfunction GardensEditController(Garden, $state, Image) {\n  const gardensEdit = this;\n  gardensEdit.garden = Garden.get($state.params);\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n\n  function deleteImage(image) {\n    Image.get({id: image.id}, (thisImage) => {\n      thisImage.$remove(() => {\n        gardensEdit.garden.$update();\n        $state.reload();\n      });\n    });\n  }\n\n  this.deleteImage = deleteImage;\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ImagesNewController', ImagesNewController);\n// .controller('ImagesIndexController', ImagesIndexController)\n// .controller('ImagesShowController', ImagesShowController)\n// .controller('ImagesEditController', ImagesEditController);\n\n\n\nImagesNewController.$inject = ['Image', '$state'];\nfunction ImagesNewController(Image, $state) {\n  const imagesNew = this;\n  imagesNew.image = {};\n  imagesNew.image.garden_id = $state.params.id;\n  // console.log($state.params.id);\n  function create() {\n    Image.save(imagesNew.image, () => {\n      $state.reload();\n    });\n  }\n\n  function addDesign() {\n    $state.go('designsNew', {id: $state.params.id});\n  }\n  imagesNew.addDesign = addDesign;\n  imagesNew.create = create;\n}\n","angular.module('finalProject')\n.factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    search: { url: `${API_URL}/items/search`,\n      method: 'GET',\n      params: {\n        query: '@query'\n      }\n    }\n  });\n}\n","angular.module('finalProject')\n.controller('ItemsNewController', ItemsNewController)\n.controller('ItemsIndexController', ItemsIndexController)\n.controller('ItemsShowController', ItemsShowController)\n.controller('ItemsEditController', ItemsEditController);\n\n\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n  itemsNew.item = {};\n  itemsNew.displayedResults = [];\n  itemsNew.searchTerm = null;\n\n  function searchAmazon() {\n    itemsNew.displayedResults = [];\n    itemsNew.itemsSearched = null;\n    Item.search({query: itemsNew.searchTerm }).$promise.then((data) => {\n      itemsNew.itemsSearched = data.ItemSearchResponse.Items.Item;\n      for (let i = 0; i < itemsNew.itemsSearched.length; i++) {\n        itemsNew.displayedResults.push({\n          name: itemsNew.itemsSearched[i].ItemAttributes.Title,\n          image: itemsNew.itemsSearched[i].LargeImage.URL,\n          description: itemsNew.itemsSearched[i].ItemAttributes.Feature[0],\n          price: itemsNew.itemsSearched[i].ItemAttributes.ListPrice.FormattedPrice\n        });\n      }\n    });\n  }\n\n  function createNew(item) {\n    item.garden_ids = [];\n    item.item_type = itemsNew.item_type;\n    item.garden_ids.push(parseInt($state.params.id));\n    Item.save(item, () => {\n      $state.reload();\n    });\n  }\n\n  this.createNew = createNew;\n  this.searchAmazon = searchAmazon;\n  itemsNew.item.garden_ids = [];\n  itemsNew.garden_id = parseInt($state.params.id);\n  itemsNew.item.garden_ids.push(itemsNew.garden_id);\n\n  function create() {\n    console.log('item: ', itemsNew.item);\n    Item.save(itemsNew.item, () => {\n      $state.reload();\n    });\n  }\n\n  itemsNew.create = create;\n}\n\n\n\n\nItemsIndexController.$inject = ['Item', 'Garden', '$state'];\nfunction ItemsIndexController(Item, Garden, $state) {\n  const itemsIndex = this;\n  itemsIndex.all = Item.query();\n\n  function addItem(item) {\n    console.log(item);\n    Garden.get($state.params, (garden) => {\n      console.log(garden);\n      item.garden_ids.push(garden.id);\n      item.$update();\n    }\n  );}\n  this.addItem = addItem;\n}\n\n\n\n\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  itemsShow.item = Item.get($state.params);\n  // function isCurrentUser() {\n  //   Item.get({ id: ($state.params) }, (item) => {\n  //     itemsShow.item = item;\n  //   });\n  //   return itemsShow.item.user.id === $auth.getPayload().id;\n  // }\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  this.deleteItem = deleteItem;\n}\n\n\n\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  itemsEdit.update = update;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'Garden'];\nfunction MainController($auth, $state, $rootScope, Garden) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.currentUser = $auth.getPayload().id;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n\n  const protectedPages = ['gardensEdit', 'itemsNew', 'imagesNew', 'designsNew'];\n\n\n  function protectPages(e, toState, toParams) {\n    Garden.get({id: parseFloat(toParams.id)}, (myGarden) => {\n      console.log(myGarden);\n      if((!$auth.isAuthenticated() &&\n      protectedPages.includes(toState.name)) ||\n      (protectedPages.indexOf(toState.name) !== -1) && (parseFloat(myGarden.user.id) !== $auth.getPayload().id)) {\n        e.preventDefault();\n        $state.go('login');\n      } else if ((!$auth.isAuthenticated() &&\n      protectedStates.includes(toState.name)) ||\n      (protectedStates.indexOf(toState.name) !== -1) && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n        e.preventDefault();\n        $state.go('login');\n      }\n    });\n  }\n\n\n  const protectedStates = ['usersEdit'];\n\n\n\n  $rootScope.$on('$stateChangeStart', protectPages);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardens/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardens/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardens/gardensShow.html'\n    // controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardens/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n  .state('imagesNew', {\n    url: '/gardens/:id/imagesNew',\n    templateUrl: '/templates/images/imagesNew.html',\n    controller: 'ImagesNewController as imagesNew'\n  })\n  .state('itemsIndex', {\n    url: '/items',\n    templateUrl: '/templates/items/itemsIndex.html',\n    controller: 'ItemsIndexController as itemsIndex'\n  })\n  .state('itemsNew', {\n    url: '/gardens/:id/items/new',\n    templateUrl: '/templates/items/itemsNew.html'\n    // controller: 'ItemsNewController as itemsNew'\n  })\n  .state('itemsShow', {\n    url: '/items/:id',\n    templateUrl: '/templates/items/itemsShow.html',\n    controller: 'ItemsShowController as itemsShow'\n  })\n  .state('commentsIndex', {\n    url: '/comments',\n    templateUrl: '/templates/comments.html',\n    controller: 'CommentsIndexController as commentsIndex'\n  })\n  .state('designsIndex', {\n    url: '/designs',\n    templateUrl: '/templates/designs/designsIndex.html',\n    controller: 'DesignsIndexController as designsIndex'\n  })\n  .state('designsNew', {\n    url: '/gardens/:id/designsNew',\n    templateUrl: '/templates/designs/designsNew.html',\n    controller: 'DesignsNewController as designsNew'\n  })\n  .state('designsShow', {\n    url: '/designs/:id',\n    templateUrl: '/templates/designs/designsShow.html',\n    controller: 'DesignsShowController as designsShow'\n  })\n  .state('tilesIndex', {\n    url: '/tiles',\n    templateUrl: '/templates/tilesIndex.html',\n    controller: 'TilesIndexController as tilesIndex'\n  })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/gardens');\n}\n","angular.module('finalProject')\n  .factory('Tile', Tile);\n\nTile.$inject = ['$resource', 'API_URL'];\nfunction Tile($resource, API_URL) {\n  return new $resource(`${API_URL}/tiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TilesIndexController', TilesIndexController);\n\n\nTilesIndexController.$inject = ['Tile'];\nfunction TilesIndexController(Tile) {\n  const tilesIndex = this;\n  tilesIndex.all = Tile.query();\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}