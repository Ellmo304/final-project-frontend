{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/models/design.js","js/controllers/designs.js","js/models/garden.js","js/controllers/gardens.js","js/models/image.js","js/controllers/images.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/tile.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsNewController","create","console","log","commentsNew","comment","save","reload","garden_id","parseInt","params","user_id","getPayload","CommentsIndexController","commentsIndex","all","query","CommentsShowController","deleteComment","commentsShow","$remove","isLoggedIn","isAuthenticated","get","CommentsEditController","commentsEdit","$update","Design","DesignsNewController","Tile","Garden","tilesCreate","x","design","i","tiles","length","designsNew","tile","type","className","position","design_id","_id","setClass","texture","selectedClass","setTile","index","name","myArr","Array","document","getElementById","getElementsByTagName","DesignsIndexController","designsIndex","DesignsShowController","deleteDesign","designsShow","DesignsEditController","designsEdit","GardensNewController","gardensNew","garden","GardensIndexController","gardensIndex","GardensShowController","deleteGarden","gardensShow","GardensEditController","gardensEdit","Image","ImagesNewController","imagesNew","image","addDesign","Item","ItemsNewController","itemsNew","item","garden_ids","push","ItemsIndexController","itemsIndex","ItemsShowController","deleteItem","itemsShow","ItemsEditController","itemsEdit","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","parseFloat","preventDefault","main","message","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","isCurrentUser","Number","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('CommentsNewController', CommentsNewController)\n.controller('CommentsIndexController', CommentsIndexController)\n.controller('CommentsShowController', CommentsShowController)\n.controller('CommentsEditController', CommentsEditController);\n\n\n\nCommentsNewController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsNewController(Comment, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n\n  commentsNew.comment.garden_id = parseInt($state.params.id);\n  commentsNew.comment.user_id = parseInt($auth.getPayload().id) ;\n  function create() {\n    console.log('comment: ', commentsNew.comment);\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = create;\n}\n\n\n\n\nCommentsIndexController.$inject = ['Comment'];\nfunction CommentsIndexController(Comment) {\n  const commentsIndex = this;\n  commentsIndex.all = Comment.query();\n}\n\n\n\n\nCommentsShowController.$inject = ['Comment', '$state', '$auth'];\nfunction CommentsShowController(Comment, $state, $auth) {\n  const commentsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  commentsShow.comment = Comment.get($state.params);\n  // function isCurrentUser() {\n  //   Comment.get({ id: ($state.params) }, (comment) => {\n  //     commentsShow.comment = comment;\n  //   });\n  //   return commentsShow.comment.user.id === $auth.getPayload().id;\n  // }\n  function deleteComment() {\n    commentsShow.comment.$remove(() => {\n      $state.go('commentsIndex');\n    });\n  }\n  this.deleteComment = deleteComment;\n}\n\n\n\n\nCommentsEditController.$inject = ['Comment', '$state'];\nfunction CommentsEditController(Comment, $state) {\n  const commentsEdit = this;\n  commentsEdit.comment = Comment.get($state.params);\n\n  function update() {\n    commentsEdit.comment.$update(() => {\n      $state.go('commentsShow', $state.params);\n    });\n  }\n  commentsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Design', Design);\n\nDesign.$inject = ['$resource', 'API_URL'];\nfunction Design($resource, API_URL) {\n  return new $resource(`${API_URL}/designs/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('DesignsNewController', DesignsNewController)\n.controller('DesignsIndexController', DesignsIndexController)\n.controller('DesignsShowController', DesignsShowController)\n.controller('DesignsEditController', DesignsEditController);\n\n\n\nDesignsNewController.$inject = ['Design', 'Tile', 'Garden', '$state'];\nfunction DesignsNewController(Design, Tile, Garden, $state) {\n  const designsNew = this;\n  designsNew.design = {};\n  designsNew.design.garden_id = parseInt($state.params.id);\n  designsNew.design.name = Garden.get({ id: $state.params.id }) ;\n\n  designsNew.selectedClass = 'grass';\n  designsNew.myArr = new Array(200);\n  const tiles = document.getElementById('designGrid').getElementsByTagName('li');\n  designsNew.tile = {};\n\n\n  function tilesCreate() {\n    // designsNew.all = Design.query();\n    const x = Garden.get({ id: $state.params.id }, () => {\n      console.log(x.design);\n    });\n    for (let i=0; i < tiles.length; i++) {\n      designsNew.tile.type = tiles[i].className;\n      designsNew.tile.position = tiles[i].id;\n      designsNew.tile.design_id = designsNew.all[designsNew.all.length-1]._id;\n      Tile.save(designsNew.tile);\n    }\n    designsNew.tile = {};\n  }\n\n  function create() {\n    Design.save(designsNew.design, () => {\n      designsNew.tilesCreate();\n    });\n  }\n\n  function setClass(texture) {\n    designsNew.selectedClass = texture;\n  }\n\n  function setTile(index) {\n    // console.log(tiles[index].className);\n    tiles[index].className = `${designsNew.selectedClass}`;\n  }\n  this.tilesCreate = tilesCreate;\n  this.create = create;\n  this.setClass = setClass;\n  this.setTile = setTile;\n}\n\n\n\n\nDesignsIndexController.$inject = ['Design'];\nfunction DesignsIndexController(Design) {\n  const designsIndex = this;\n  designsIndex.all = Design.query();\n}\n\n\n\n\nDesignsShowController.$inject = ['Design', '$state', '$auth'];\nfunction DesignsShowController(Design, $state, $auth) {\n  const designsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  designsShow.design = Design.get($state.params);\n  // console.log(designsShow.design);\n\n  // function isCurrentUser() {\n  //   Design.get({ id: ($state.params) }, (design) => {\n  //     designsShow.design = design;\n  //   });\n  //   return designsShow.design.user.id === $auth.getPayload().id;\n  // }\n  function deleteDesign() {\n    designsShow.design.$remove(() => {\n      $state.go('designsIndex');\n    });\n  }\n  this.deleteDesign = deleteDesign;\n}\n\n\n\n\nDesignsEditController.$inject = ['Design', '$state'];\nfunction DesignsEditController(Design, $state) {\n  const designsEdit = this;\n  designsEdit.design = Design.get($state.params);\n\n  function update() {\n    designsEdit.design.$update(() => {\n      $state.go('designsShow', $state.params);\n    });\n  }\n  designsEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Garden', Garden);\n\nGarden.$inject = ['$resource', 'API_URL'];\nfunction Garden($resource, API_URL) {\n  return new $resource(`${API_URL}/gardens/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GardensNewController', GardensNewController)\n.controller('GardensIndexController', GardensIndexController)\n.controller('GardensShowController', GardensShowController)\n.controller('GardensEditController', GardensEditController);\n\n\n\nGardensNewController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensNewController(Garden, $state, $auth) {\n  const gardensNew = this;\n  gardensNew.garden = {};\n  gardensNew.garden.user_id = $auth.getPayload().id;\n\n  function create() {\n    Garden.save(gardensNew.garden, (garden) => {\n      $state.go('imagesNew', {id: garden.id});\n    });\n  }\n  gardensNew.create = create;\n}\n\n\n\n\nGardensIndexController.$inject = ['Garden'];\nfunction GardensIndexController(Garden) {\n  const gardensIndex = this;\n  gardensIndex.all = Garden.query();\n}\n\n\n\n\nGardensShowController.$inject = ['Garden', '$state', '$auth'];\nfunction GardensShowController(Garden, $state, $auth) {\n  const gardensShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  gardensShow.garden = Garden.get($state.params);\n  console.log(gardensShow.garden);\n\n  // function isCurrentUser() {\n  //   Garden.get({ id: ($state.params) }, (garden) => {\n  //     gardensShow.garden = garden;\n  //   });\n  //   return gardensShow.garden.user.id === $auth.getPayload().id;\n  // }\n  function deleteGarden() {\n    gardensShow.garden.$remove(() => {\n      $state.go('gardensIndex');\n    });\n  }\n  this.deleteGarden = deleteGarden;\n}\n\n\n\n\nGardensEditController.$inject = ['Garden', '$state'];\nfunction GardensEditController(Garden, $state) {\n  const gardensEdit = this;\n  gardensEdit.garden = Garden.get($state.params);\n\n  function update() {\n    gardensEdit.garden.$update(() => {\n      $state.go('gardensShow', $state.params);\n    });\n  }\n  gardensEdit.update = update;\n}\n","angular.module('finalProject')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource', 'API_URL'];\nfunction Image($resource, API_URL) {\n  return new $resource(`${API_URL}/images/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ImagesNewController', ImagesNewController);\n// .controller('ImagesIndexController', ImagesIndexController)\n// .controller('ImagesShowController', ImagesShowController)\n// .controller('ImagesEditController', ImagesEditController);\n\n\n\nImagesNewController.$inject = ['Image', '$state'];\nfunction ImagesNewController(Image, $state) {\n  const imagesNew = this;\n  imagesNew.image = {};\n  imagesNew.image.garden_id = $state.params.id;\n  // console.log($state.params.id);\n  function create() {\n    Image.save(imagesNew.image, () => {\n      $state.reload();\n    });\n  }\n\n  function addDesign() {\n    $state.go('designsNew', {id: $state.params.id});\n  }\n  imagesNew.addDesign = addDesign;\n  imagesNew.create = create;\n}\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ItemsNewController', ItemsNewController)\n.controller('ItemsIndexController', ItemsIndexController)\n.controller('ItemsShowController', ItemsShowController)\n.controller('ItemsEditController', ItemsEditController);\n\n\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n  itemsNew.item = {};\n\n  itemsNew.item.garden_ids = [];\n  itemsNew.garden_id = parseInt($state.params.id);\n  itemsNew.item.garden_ids.push(itemsNew.garden_id);\n  \n  function create() {\n    console.log('item: ', itemsNew.item);\n    Item.save(itemsNew.item, () => {\n      $state.reload();\n    });\n  }\n  itemsNew.create = create;\n}\n\n\n\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n  itemsIndex.all = Item.query();\n}\n\n\n\n\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  itemsShow.item = Item.get($state.params);\n  // function isCurrentUser() {\n  //   Item.get({ id: ($state.params) }, (item) => {\n  //     itemsShow.item = item;\n  //   });\n  //   return itemsShow.item.user.id === $auth.getPayload().id;\n  // }\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  this.deleteItem = deleteItem;\n}\n\n\n\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  itemsEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('gardensNew', {\n    url: '/gardens/new',\n    templateUrl: '/templates/gardens/gardensNew.html',\n    controller: 'GardensNewController as gardensNew'\n  })\n  .state('gardensIndex', {\n    url: '/gardens',\n    templateUrl: '/templates/gardens/gardensIndex.html',\n    controller: 'GardensIndexController as gardensIndex'\n  })\n  .state('gardensShow', {\n    url: '/gardens/:id',\n    templateUrl: '/templates/gardens/gardensShow.html'\n    // controller: 'GardensShowController as gardensShow'\n  })\n  .state('gardensEdit', {\n    url: '/gardens/:id/edit',\n    templateUrl: '/templates/gardens/gardensEdit.html',\n    controller: 'GardensEditController as gardensEdit'\n  })\n  .state('imagesNew', {\n    url: '/gardens/:id/imagesNew',\n    templateUrl: '/templates/images/imagesNew.html',\n    controller: 'ImagesNewController as imagesNew'\n  })\n  .state('items', {\n    url: '/gardens/:id/items',\n    templateUrl: '/templates/items/itemsNew.html',\n    controller: 'ItemsNewController as itemsNew'\n  })\n  .state('itemsIndex', {\n    url: '/items',\n    templateUrl: '/templates/items/itemsIndex.html',\n    controller: 'ItemsIndexController as itemsIndex'\n  })\n  .state('itemsShow', {\n    url: '/items/:id',\n    templateUrl: '/templates/items/itemsShow.html',\n    controller: 'ItemsShowController as itemsShow'\n  })\n  .state('commentsIndex', {\n    url: '/comments',\n    templateUrl: '/templates/comments.html',\n    controller: 'CommentsIndexController as commentsIndex'\n  })\n  .state('designsNew', {\n    url: '/gardens/:id/designsNew',\n    templateUrl: '/templates/designs/designsNew.html',\n    controller: 'DesignsNewController as designsNew'\n  })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('Tile', Tile);\n\nTile.$inject = ['$resource', 'API_URL'];\nfunction Tile($resource, API_URL) {\n  return new $resource(`${API_URL}/tiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  this.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}